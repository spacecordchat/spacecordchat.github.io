{"version":3,"file":"C4fBLEXxBXR9VAexerBM.js","sources":["../../src/stores/GatewayConnectionStore.ts"],"sourcesContent":["import {\n\tAPIGuildMember,\n\tAPIMessage,\n\tChannelType,\n\tGatewayActivity,\n\tGatewayChannelCreateDispatchData,\n\tGatewayChannelDeleteDispatchData,\n\tGatewayChannelUpdateDispatchData,\n\tGatewayCloseCodes,\n\tGatewayDispatchEvents,\n\tGatewayDispatchPayload,\n\tGatewayGuild,\n\tGatewayGuildCreateDispatchData,\n\tGatewayGuildDeleteDispatchData,\n\tGatewayGuildMemberAddDispatchData,\n\tGatewayGuildMemberListUpdateDispatchData,\n\tGatewayGuildMemberRemoveDispatchData,\n\tGatewayGuildMemberUpdateDispatchData,\n\tGatewayGuildModifyDispatchData,\n\tGatewayHeartbeat,\n\tGatewayHelloData,\n\tGatewayIdentify,\n\tGatewayLazyRequest,\n\tGatewayLazyRequestData,\n\tGatewayMessageCreateDispatchData,\n\tGatewayMessageDeleteBulkDispatchData,\n\tGatewayMessageDeleteDispatchData,\n\tGatewayMessageUpdateDispatchData,\n\tGatewayOpcodes,\n\tGatewayPresenceUpdateDispatchData,\n\tGatewayReadyDispatchData,\n\tGatewayReceivePayload,\n\tGatewaySendPayload,\n\tGatewayTypingStartDispatchData,\n\tGatewayUserUpdateDispatchData,\n\tPresenceUpdateStatus,\n\tSnowflake,\n} from \"@spacebarchat/spacebar-api-types/v9\";\nimport { action, makeObservable, observable, runInAction } from \"mobx\";\nimport Logger from \"../utils/Logger\";\nimport { debounce } from \"../utils/debounce\";\nimport AppStore from \"./AppStore\";\n\nconst GATEWAY_VERSION = \"9\";\nconst GATEWAY_ENCODING = \"json\";\nconst RECONNECT_TIMEOUT = 10000; // start at 10 seconds, doubles each time\n\ninterface GatewaySession {\n\tactive: boolean;\n\tactivities: GatewayActivity[];\n\tclient_info: {\n\t\tclient?: string;\n\t\tos?: string;\n\t\tversion?: number;\n\t};\n\tsession_id: string;\n\tstatus: PresenceUpdateStatus;\n}\n\nexport default class GatewayConnectionStore {\n\tprivate readonly logger: Logger = new Logger(\"GatewayConnectionStore\");\n\t@observable private socket: WebSocket | null = null;\n\t@observable public sessionId: string | null = null;\n\t@observable public session: GatewaySession | undefined;\n\t@observable public readyState: number = WebSocket.CLOSED;\n\n\tprivate app: AppStore;\n\tprivate url?: string;\n\tprivate heartbeatInterval: number | null = null;\n\tprivate heartbeater: NodeJS.Timeout | null = null;\n\tprivate initialHeartbeatTimeout: NodeJS.Timeout | null = null;\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tprivate dispatchHandlers: Map<GatewayDispatchEvents, Function> = new Map();\n\tprivate connectionStartTime?: number;\n\tprivate identifyStartTime?: number;\n\tprivate sequence = 0;\n\tprivate heartbeatAck = true;\n\tprivate lazyRequestChannels = new Map<string, Snowflake[]>(); // guild, channels\n\tprivate reconnectTimeout = 0;\n\n\tconstructor(app: AppStore) {\n\t\tthis.app = app;\n\n\t\tmakeObservable(this);\n\t}\n\n\t/**\n\t * Starts connection to gateway\n\t */\n\t@action\n\tasync connect(url: string) {\n\t\tif (!this.url) {\n\t\t\tconst newUrl = new URL(url);\n\t\t\tnewUrl.searchParams.append(\"v\", GATEWAY_VERSION);\n\t\t\tnewUrl.searchParams.append(\"encoding\", GATEWAY_ENCODING);\n\t\t\tthis.url = newUrl.href;\n\t\t}\n\t\tthis.logger.debug(`[Connect] ${this.url}`);\n\t\tthis.connectionStartTime = Date.now();\n\t\tthis.socket = new WebSocket(this.url);\n\t\tthis.readyState = WebSocket.CONNECTING;\n\n\t\tthis.setupListeners();\n\t\tthis.setupDispatchHandler();\n\t}\n\n\t@action\n\tasync disconnect(code?: number, reason?: string) {\n\t\tif (!this.socket) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.readyState = WebSocket.CLOSING;\n\t\tthis.logger.debug(`[Disconnect] ${this.url}`);\n\t\tthis.socket?.close(code, reason);\n\t}\n\treconnecting = false;\n\tstartReconnect() {\n\t\tif (this.reconnecting) return;\n\t\tthis.reconnecting = true;\n\t\tsetTimeout(() => {\n\t\t\tthis.reconnecting = false;\n\t\t\tthis.logger.debug(\"Starting reconnect...\");\n\t\t\tthis.connect(this.url!);\n\t\t}, this.reconnectTimeout);\n\t}\n\n\tprivate setupListeners() {\n\t\tthis.socket!.onopen = this.onopen;\n\t\tthis.socket!.onmessage = this.onmessage;\n\t\tthis.socket!.onerror = this.onerror;\n\t\tthis.socket!.onclose = this.onclose;\n\t}\n\n\tprivate setupDispatchHandler() {\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.Ready, this.onReady);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.Resumed, this.onResumed);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.GuildCreate, this.onGuildCreate);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.GuildUpdate, this.onGuildUpdate);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.GuildDelete, this.onGuildDelete);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.GuildMemberAdd, this.onGuildMemberAdd);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.GuildMemberRemove, this.onGuildMemberRemove);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.GuildMemberUpdate, this.onGuildMemberUpdate);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.GuildMemberListUpdate, this.onGuildMemberListUpdate);\n\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.ChannelCreate, this.onChannelCreate);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.ChannelUpdate, this.onChannelUpdate);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.ChannelDelete, this.onChannelDelete);\n\t\t// @ts-expect-error missing event in typings\n\t\tthis.dispatchHandlers.set(\"MESSAGE_ACK\", this.onMessageAck);\n\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.MessageCreate, this.onMessageCreate);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.MessageUpdate, this.onMessageUpdate);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.MessageDelete, this.onMessageDelete);\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.MessageDeleteBulk, this.onMessageBulkDelete);\n\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.PresenceUpdate, this.onPresenceUpdate);\n\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.TypingStart, this.onTypingStart);\n\n\t\tthis.dispatchHandlers.set(GatewayDispatchEvents.UserUpdate, this.onUserUpdate);\n\t}\n\n\tprivate onopen = () => {\n\t\tthis.logger.debug(`[Connected] ${this.url} (took ${Date.now() - this.connectionStartTime!}ms)`);\n\t\tthis.readyState = WebSocket.OPEN;\n\t\tthis.reconnectTimeout = 0;\n\n\t\tthis.handleIdentify();\n\t};\n\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tprivate onmessage = (e: MessageEvent<any>) => {\n\t\tconst payload: GatewayReceivePayload = JSON.parse(e.data);\n\t\tif (payload.op !== GatewayOpcodes.Dispatch) {\n\t\t\tthis.logger.debug(`[Gateway] -> ${payload.op}`, payload);\n\t\t}\n\n\t\tswitch (payload.op) {\n\t\t\tcase GatewayOpcodes.Dispatch:\n\t\t\t\tthis.handleDispatch(payload);\n\t\t\t\tbreak;\n\t\t\tcase GatewayOpcodes.Heartbeat:\n\t\t\t\tthis.sendHeartbeat();\n\t\t\t\tbreak;\n\t\t\tcase GatewayOpcodes.Reconnect:\n\t\t\t\tthis.handleReconnect();\n\t\t\t\tbreak;\n\t\t\tcase GatewayOpcodes.InvalidSession:\n\t\t\t\tthis.handleInvalidSession(payload.d);\n\t\t\t\tbreak;\n\t\t\tcase GatewayOpcodes.Hello:\n\t\t\t\tthis.handleHello(payload.d);\n\t\t\t\tbreak;\n\t\t\tcase GatewayOpcodes.HeartbeatAck:\n\t\t\t\tthis.handleHeartbeatAck();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.logger.debug(\"Received unknown opcode\");\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tprivate onerror = (e: Event) => {\n\t\tthis.logger.error(\"[Gateway] Socket Error\", e);\n\t};\n\n\tprivate onclose = (e: CloseEvent) => {\n\t\tthis.readyState = WebSocket.CLOSED;\n\t\tthis.handleClose(e.code);\n\t};\n\n\tprivate sendJson = (payload: GatewaySendPayload) => {\n\t\tif (!this.socket) {\n\t\t\tthis.logger.error(\"Socket is not open\");\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.socket.readyState !== WebSocket.OPEN) {\n\t\t\tthis.logger.error(`Socket is not open; readyState: ${this.socket.readyState}`);\n\t\t\treturn;\n\t\t}\n\t\tthis.logger.debug(`[Gateway] <- ${payload.op}`, payload);\n\t\tthis.socket.send(JSON.stringify(payload));\n\t};\n\n\t/**\n\t * Sends Identify payload to gateway\n\t */\n\tprivate handleIdentify = () => {\n\t\tthis.logger.debug(\"handleIdentify called\");\n\t\tif (!this.app.token) {\n\t\t\treturn this.logger.error(\"Token shouldn't be null here\");\n\t\t}\n\t\tthis.identifyStartTime = Date.now();\n\n\t\tconst payload: GatewayIdentify = {\n\t\t\top: GatewayOpcodes.Identify,\n\t\t\td: {\n\t\t\t\ttoken: this.app.token!,\n\t\t\t\tcapabilities: 16381,\n\t\t\t\tintents: 3276799,\n\t\t\t\tproperties: {},\n\t\t\t\tcompress: false,\n\t\t\t\tpresence: {\n\t\t\t\t\tstatus: PresenceUpdateStatus.Online,\n\t\t\t\t\tsince: Date.now(),\n\t\t\t\t\tactivities: [],\n\t\t\t\t\tafk: false,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t\tthis.sendJson(payload);\n\t};\n\n\t/**\n\t * Processes an invalid session opcode\n\t */\n\tprivate handleInvalidSession = (resumable: boolean) => {\n\t\tthis.cleanup();\n\n\t\tthis.logger.debug(`Received invalid session; Can Resume: ${resumable}`);\n\t\tif (!resumable) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: handle resumable\n\t};\n\n\t/**\n\t * Processes a reconnect opcode\n\t */\n\tprivate handleReconnect() {\n\t\tthis.cleanup();\n\t\tthis.logger.debug(\"Received reconnect\");\n\n\t\tthis.startReconnect();\n\t}\n\n\tprivate handleResume() {\n\t\tthis.logger.debug(\"handleResume called\");\n\t\tif (!this.app.token) {\n\t\t\treturn this.logger.error(\"Token shouldn't be null here\");\n\t\t}\n\n\t\tthis.sendJson({\n\t\t\top: GatewayOpcodes.Resume,\n\t\t\td: {\n\t\t\t\ttoken: this.app.token!,\n\t\t\t\tsession_id: this.sessionId!,\n\t\t\t\tseq: this.sequence,\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate handleHello = (data: GatewayHelloData) => {\n\t\tthis.heartbeatInterval = data.heartbeat_interval;\n\t\tthis.reconnectTimeout = this.heartbeatInterval;\n\t\tthis.logger.info(\n\t\t\t`[Hello] heartbeat interval: ${data.heartbeat_interval} (took ${Date.now() - this.connectionStartTime!}ms)`,\n\t\t);\n\t\tthis.startHeartbeater();\n\t};\n\n\tcanReconnect(code: GatewayCloseCodes | undefined) {\n\t\tif (!code) {\n\t\t\treturn true;\n\t\t}\n\n\t\tswitch (code) {\n\t\t\tcase GatewayCloseCodes.AuthenticationFailed:\n\t\t\tcase GatewayCloseCodes.InvalidShard:\n\t\t\tcase GatewayCloseCodes.ShardingRequired:\n\t\t\tcase GatewayCloseCodes.InvalidAPIVersion:\n\t\t\tcase GatewayCloseCodes.InvalidIntents:\n\t\t\tcase GatewayCloseCodes.DisallowedIntents:\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\tprivate handleClose = (code: number | undefined) => {\n\t\tthis.cleanup();\n\n\t\tif (code === 4004) {\n\t\t\tthis.logger.warn(\"closed because of authentication failure.\");\n\t\t\t// remove token, this will send us back to the login screen\n\t\t\t// TODO: maybe we could show a toast here so the user knows why they got logged out\n\t\t\tthis.app.logout();\n\t\t\tthis.reset();\n\t\t\tthis.app.setAppLoading(false);\n\t\t\treturn;\n\t\t}\n\n\t\t// dont reconnect on \"going away\"\n\t\tif (code === 1001) return;\n\n\t\tif (this.reconnectTimeout === 0) this.reconnectTimeout = RECONNECT_TIMEOUT;\n\t\telse this.reconnectTimeout += RECONNECT_TIMEOUT;\n\n\t\tthis.logger.debug(\n\t\t\t`Websocket closed with code ${code}; Will reconnect in ${(this.reconnectTimeout / 1000).toFixed(\n\t\t\t\t2,\n\t\t\t)} seconds.`,\n\t\t);\n\n\t\tthis.startReconnect();\n\t};\n\n\t/**\n\t * Resets the gateway state\n\t */\n\tprivate reset = () => {\n\t\tthis.sessionId = null;\n\t\tthis.sequence = 0;\n\t\tthis.readyState = WebSocket.CLOSED;\n\t};\n\n\t/**\n\t * Starts the heartbeat interval\n\t */\n\tprivate startHeartbeater = () => {\n\t\tif (this.heartbeater) {\n\t\t\tclearInterval(this.heartbeater);\n\t\t\tthis.heartbeater = null;\n\t\t}\n\n\t\tconst heartbeaterFn = () => {\n\t\t\tif (this.heartbeatAck) {\n\t\t\t\tthis.heartbeatAck = false;\n\t\t\t\tthis.sendHeartbeat();\n\t\t\t} else {\n\t\t\t\tthis.handleHeartbeatTimeout();\n\t\t\t}\n\t\t};\n\n\t\tthis.initialHeartbeatTimeout = setTimeout(\n\t\t\t() => {\n\t\t\t\tthis.initialHeartbeatTimeout = null;\n\t\t\t\tthis.heartbeater = setInterval(heartbeaterFn, this.heartbeatInterval!);\n\t\t\t\theartbeaterFn();\n\t\t\t},\n\t\t\tMath.floor(Math.random() * this.heartbeatInterval!),\n\t\t);\n\t};\n\n\t/**\n\t * Stops the heartbeat interval\n\t */\n\tprivate stopHeartbeater = () => {\n\t\tif (this.heartbeater) {\n\t\t\tclearInterval(this.heartbeater);\n\t\t\tthis.heartbeater = null;\n\t\t}\n\n\t\tif (this.initialHeartbeatTimeout) {\n\t\t\tclearTimeout(this.initialHeartbeatTimeout);\n\t\t\tthis.initialHeartbeatTimeout = null;\n\t\t}\n\t};\n\n\t/**\n\t * Handles a heartbeat timeout\n\t */\n\tprivate handleHeartbeatTimeout = () => {\n\t\tthis.logger.warn(\n\t\t\t`[Heartbeat ACK Timeout] should reconnect in ${(RECONNECT_TIMEOUT / 1000).toFixed(2)} seconds`,\n\t\t);\n\n\t\tthis.socket?.close(4009);\n\n\t\tthis.cleanup();\n\t\tthis.reset();\n\n\t\tthis.startReconnect();\n\t};\n\n\t/**\n\t * Sends a heartbeat\n\t */\n\tprivate sendHeartbeat = () => {\n\t\tconst payload: GatewayHeartbeat = {\n\t\t\top: GatewayOpcodes.Heartbeat,\n\t\t\td: this.sequence,\n\t\t};\n\t\tthis.logger.debug(\"Sending heartbeat\");\n\t\tthis.sendJson(payload);\n\t};\n\n\t/**\n\t * Stops heartbeat interval and removes socket\n\t */\n\tprivate cleanup = () => {\n\t\tthis.logger.debug(\"Cleaning up\");\n\t\tthis.stopHeartbeater();\n\t\tthis.socket = null;\n\t};\n\n\t/**\n\t * Processes a heartbeat ack opcode\n\t */\n\tprivate handleHeartbeatAck = () => {\n\t\tthis.logger.debug(\"Received heartbeat ack\");\n\t\tthis.heartbeatAck = true;\n\t};\n\n\t/**\n\t * processes a dispatch opcode\n\t */\n\tprivate handleDispatch = (data: GatewayDispatchPayload) => {\n\t\tconst { d, t, s } = data;\n\t\tthis.logger.debug(`[Gateway] -> ${t}`, d);\n\t\tthis.sequence = s;\n\t\tconst handler = this.dispatchHandlers.get(t);\n\t\tif (!handler) {\n\t\t\tthis.logger.debug(`No handler for dispatch event ${t}`);\n\t\t\treturn;\n\t\t}\n\n\t\thandler(d);\n\t};\n\n\t/**\n\t * Processes a resumed dispatch event\n\t */\n\tprivate onResumed = () => {\n\t\tthis.logger.debug(\"Resumed\");\n\t};\n\n\t/**\n\t * Processes a ready dispatch event\n\t */\n\tprivate onReady = (data: GatewayReadyDispatchData) => {\n\t\tthis.logger.info(`[Ready] took ${Date.now() - this.connectionStartTime!}ms`);\n\t\tconst { session_id, guilds, users, user, private_channels, sessions, read_state } = data;\n\t\tthis.sessionId = session_id;\n\t\tthis.session = (sessions as GatewaySession[])?.find((x) => x.session_id === session_id);\n\n\t\tthis.app.setUser(user);\n\n\t\tthis.app.guilds.addAll(guilds);\n\t\tthis.app.guilds.setInitialGuildsLoaded();\n\t\tif (users) {\n\t\t\tthis.app.users.addAll(users);\n\t\t}\n\n\t\t// TODO: store relationships\n\t\tthis.app.readStateStore.addAll(read_state?.entries);\n\t\tthis.app.privateChannels.addAll(private_channels);\n\n\t\tif (data.merged_members) {\n\t\t\t// store merged members (the client users member object for each guild)\n\t\t\tfor (const mm of data.merged_members as (APIGuildMember & { guild_id: string; id: string })[][]) {\n\t\t\t\tfor (const m of mm) {\n\t\t\t\t\tconst guild = this.app.guilds.get(m.guild_id);\n\t\t\t\t\tif (!guild) {\n\t\t\t\t\t\tthis.logger.warn(`[Ready] Guild ${m.guild_id} not found for member ${m.id}`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tguild.members.add(m);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.reconnectTimeout = 0;\n\t\tthis.app.setGatewayReady(true);\n\t};\n\n\tpublic onChannelOpen = (guildId: Snowflake, channelId: Snowflake) => {\n\t\tconst guildChannels = this.lazyRequestChannels.get(guildId) ?? [];\n\n\t\tif (guildChannels.includes(channelId)) return;\n\t\tconst payload: GatewayLazyRequestData = {\n\t\t\tguild_id: guildId,\n\t\t\t// activities: true,\n\t\t\t// threads: true,\n\t\t\t// typing: true,\n\t\t\tchannels: {\n\t\t\t\t[channelId]: [[0, 99]],\n\t\t\t},\n\t\t};\n\t\tthis.lazyRequestChannels.set(guildId, [channelId]);\n\n\t\tthis.sendJson({\n\t\t\top: GatewayOpcodes.LazyRequest,\n\t\t\td: payload,\n\t\t} as GatewayLazyRequest);\n\t};\n\n\t// Start dispatch handlers\n\n\tprivate onGuildCreate = (data: GatewayGuildCreateDispatchData) => {\n\t\tthis.logger.debug(\"Received guild create event\");\n\t\trunInAction(() => {\n\t\t\tthis.app.guilds.add({\n\t\t\t\t...data,\n\t\t\t\t...data.properties,\n\t\t\t} as unknown as GatewayGuild);\n\t\t});\n\t};\n\n\tprivate onGuildUpdate = (data: GatewayGuildModifyDispatchData) => {\n\t\tthis.logger.debug(\"Received guild update event\");\n\t\tthis.app.guilds.get(data.id)?.update(data);\n\t};\n\n\tprivate onGuildDelete = (data: GatewayGuildDeleteDispatchData) => {\n\t\tthis.logger.debug(\"Received guild delete event\");\n\t\trunInAction(() => {\n\t\t\tthis.app.guilds.remove(data.id);\n\t\t});\n\t};\n\n\tprivate onGuildMemberAdd = (data: GatewayGuildMemberAddDispatchData) => {\n\t\tthis.logger.debug(\"Received GuildMemberAdd event\");\n\t\tconst guild = this.app.guilds.get(data.guild_id);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[GuildMemberAdd] Guild ${data.guild_id} not found for member ${data.user?.id}`);\n\t\t\treturn;\n\t\t}\n\t\tguild.members.add(data);\n\t};\n\n\tprivate onGuildMemberRemove = (data: GatewayGuildMemberRemoveDispatchData) => {\n\t\tthis.logger.debug(\"Received GuildMemberRemove event\");\n\t\tconst guild = this.app.guilds.get(data.guild_id);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[GuildMemberRemove] Guild ${data.guild_id} not found for member ${data.user.id}`);\n\t\t\treturn;\n\t\t}\n\t\tguild.members.remove(data.user.id);\n\t};\n\n\tprivate onGuildMemberUpdate = (data: GatewayGuildMemberUpdateDispatchData) => {\n\t\tthis.logger.debug(\"Received GuildMemberUpdate event\");\n\t\tconst guild = this.app.guilds.get(data.guild_id);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[GuildMemberUpdate] Guild ${data.guild_id} not found for member ${data.user.id}`);\n\t\t\treturn;\n\t\t}\n\t\tguild.members.update(data as APIGuildMember);\n\t};\n\n\tprivate onGuildMemberListUpdate = (data: GatewayGuildMemberListUpdateDispatchData) => {\n\t\tthis.logger.debug(\"Received GuildMemberListUpdate event\");\n\t\tconst { guild_id } = data;\n\t\tconst guild = this.app.guilds.get(guild_id);\n\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[GuildMemberListUpdate] Guild ${guild_id} not found`);\n\t\t\treturn;\n\t\t}\n\n\t\tguild.updateMemberList(data);\n\t};\n\n\tprivate onChannelCreate = (data: GatewayChannelCreateDispatchData) => {\n\t\tif (data.type === ChannelType.DM || data.type === ChannelType.GroupDM) {\n\t\t\tthis.app.privateChannels.add(data);\n\t\t\treturn;\n\t\t}\n\n\t\tconst guild = this.app.guilds.get(data.guild_id!);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[ChannelCreate] Guild ${data.guild_id} not found for channel ${data.id}`);\n\t\t\treturn;\n\t\t}\n\t\tguild.addChannel(data);\n\t};\n\n\tprivate onChannelUpdate = (data: GatewayChannelUpdateDispatchData) => {\n\t\tif (data.type === ChannelType.DM || data.type === ChannelType.GroupDM) {\n\t\t\tthis.app.privateChannels.update(data);\n\t\t\treturn;\n\t\t}\n\n\t\tconst guild = this.app.guilds.get(data.guild_id!);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[ChannelUpdate] Guild ${data.guild_id} not found for channel ${data.id}`);\n\t\t\treturn;\n\t\t}\n\t\tguild.updateChannel(data);\n\t};\n\n\tprivate onChannelDelete = (data: GatewayChannelDeleteDispatchData) => {\n\t\tif (data.type === ChannelType.DM || data.type === ChannelType.GroupDM) {\n\t\t\tthis.app.privateChannels.remove(data.id);\n\t\t\treturn;\n\t\t}\n\n\t\tconst guild = this.app.guilds.get(data.guild_id!);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[ChannelDelete] Guild ${data.guild_id} not found for channel ${data.id}`);\n\t\t\treturn;\n\t\t}\n\t\tguild.removeChannel(data.id);\n\t};\n\n\tprivate onMessageAck = (data: { channel_id: string; message_id: string; version: number }) => {\n\t\t// get readstate for channel\n\t\tconst readstate = this.app.readStateStore.get(data.channel_id);\n\t\tif (!readstate) {\n\t\t\tthis.logger.warn(`[MessageAck] Readstate not found for channel ${data.channel_id}`);\n\t\t\treturn;\n\t\t}\n\n\t\trunInAction(() => {\n\t\t\treadstate.lastMessageId = data.message_id;\n\t\t});\n\n\t\tthis.logger.debug(\n\t\t\t`[MessageAck] Updated last message id for channel readstate ${data.channel_id} to ${data.message_id}`,\n\t\t);\n\t};\n\n\tprivate onMessageCreate = (data: GatewayMessageCreateDispatchData) => {\n\t\tconst guild = this.app.guilds.get(data.guild_id!);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[MessageCreate] Guild ${data.guild_id} not found for channel ${data.id}`);\n\t\t\treturn;\n\t\t}\n\t\tconst channel = this.app.channels.get(data.channel_id);\n\t\tif (!channel) {\n\t\t\tthis.logger.warn(`[MessageCreate] Channel ${data.channel_id} not found for message ${data.id}`);\n\t\t\treturn;\n\t\t}\n\n\t\tchannel.messages.add(data);\n\t\tthis.app.queue.handleIncomingMessage(data);\n\t};\n\n\tprivate onMessageUpdate = (data: GatewayMessageUpdateDispatchData) => {\n\t\tconst guild = this.app.guilds.get(data.guild_id!);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[MessageUpdate] Guild ${data.guild_id} not found for channel ${data.id}`);\n\t\t\treturn;\n\t\t}\n\t\tconst channel = this.app.channels.get(data.channel_id);\n\t\tif (!channel) {\n\t\t\tthis.logger.warn(`[MessageUpdate] Channel ${data.channel_id} not found for message ${data.id}`);\n\t\t\treturn;\n\t\t}\n\n\t\tchannel.messages.update(data as APIMessage);\n\t};\n\n\tprivate onMessageDelete = (data: GatewayMessageDeleteDispatchData) => {\n\t\tconst guild = this.app.guilds.get(data.guild_id!);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[MessageDelete] Guild ${data.guild_id} not found for channel ${data.id}`);\n\t\t\treturn;\n\t\t}\n\t\tconst channel = this.app.channels.get(data.channel_id);\n\t\tif (!channel) {\n\t\t\tthis.logger.warn(`[MessageDelete] Channel ${data.channel_id} not found for message ${data.id}`);\n\t\t\treturn;\n\t\t}\n\n\t\tchannel.messages.remove(data.id);\n\t};\n\n\tprivate onMessageBulkDelete = (data: GatewayMessageDeleteBulkDispatchData) => {\n\t\tconst guild = this.app.guilds.get(data.guild_id!);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[MessageDeleteBulk] Guild ${data.guild_id} not found.`);\n\t\t\treturn;\n\t\t}\n\t\tconst channel = this.app.channels.get(data.channel_id);\n\t\tif (!channel) {\n\t\t\tthis.logger.warn(`[MessageDeleteBulk] Channel ${data.channel_id} not found.`);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const id of data.ids) {\n\t\t\tchannel.messages.remove(id);\n\t\t}\n\t};\n\n\tprivate onPresenceUpdate = (data: GatewayPresenceUpdateDispatchData) => {\n\t\tthis.app.presences.update(data);\n\t};\n\n\tprivate onTypingStart = (data: GatewayTypingStartDispatchData) => {\n\t\tconst guild = this.app.guilds.get(data.guild_id!);\n\t\tif (!guild) {\n\t\t\tthis.logger.warn(`[TypingStart] Guild ${data.guild_id} not found for channel ${data.channel_id}`);\n\t\t\treturn;\n\t\t}\n\t\tconst channel = this.app.channels.get(data.channel_id);\n\t\tif (!channel) {\n\t\t\tthis.logger.warn(`[TypingStart] Channel ${data.channel_id} not found`);\n\t\t\treturn;\n\t\t}\n\n\t\tconst stop = debounce(() => {\n\t\t\tthis.logger.debug(`[TypingStart] ${data.user_id} has stopped typing in ${channel.id}`);\n\t\t\trunInAction(() => channel.typingIds.delete(data.user_id));\n\t\t}, 12_000); // little bit of extra delay to allow clients to send continuation typing events\n\n\t\tif (!channel.typingIds.has(data.user_id)) {\n\t\t\trunInAction(() => channel.typingIds.set(data.user_id, stop));\n\t\t\tstop();\n\t\t} else {\n\t\t\tthis.logger.debug(`[TypingStart] ${data.user_id} is still typing in ${channel.id}`);\n\t\t\tchannel.typingIds.get(data.user_id)?.();\n\t\t}\n\t};\n\n\tprivate onUserUpdate = (data: GatewayUserUpdateDispatchData) => {\n\t\tthis.app.users.update(data);\n\n\t\tif (data.id === this.app.account!.id) {\n\t\t\tthis.app.setUser(data);\n\t\t}\n\t};\n}\n"],"names":["GATEWAY_VERSION","GATEWAY_ENCODING","RECONNECT_TIMEOUT","GatewayConnectionStore","app","__publicField","Logger","payload","GatewayOpcodes","PresenceUpdateStatus","resumable","data","code","heartbeaterFn","_a","d","t","s","handler","session_id","guilds","users","user","private_channels","sessions","read_state","x","mm","m","guild","guildId","channelId","runInAction","guild_id","ChannelType","readstate","channel","id","stop","debounce","makeObservable","url","newUrl","reason","GatewayDispatchEvents","GatewayCloseCodes","__decorateClass","observable","action"],"mappings":"4iBA2CA,MAAMA,EAAkB,IAClBC,EAAmB,OACnBC,EAAoB,IAc1B,MAAqBC,CAAuB,CAqB3C,YAAYC,EAAe,CApBVC,EAAA,cAAiB,IAAIC,EAAO,wBAAwB,GACjDD,EAAA,cAA2B,MAC5BA,EAAA,iBAA2B,MAC3BA,EAAA,gBACAA,EAAA,kBAAqB,UAAU,QAE1CA,EAAA,YACAA,EAAA,YACAA,EAAA,yBAAmC,MACnCA,EAAA,mBAAqC,MACrCA,EAAA,+BAAiD,MAEjDA,EAAA,4BAA6D,KAC7DA,EAAA,4BACAA,EAAA,0BACAA,EAAA,gBAAW,GACXA,EAAA,oBAAe,IACfA,EAAA,+BAA0B,KAC1BA,EAAA,wBAAmB,GAsC3BA,EAAA,oBAAe,IA+CPA,EAAA,cAAS,IAAM,CACjB,KAAA,OAAO,MAAM,eAAe,KAAK,GAAG,UAAU,KAAK,IAAI,EAAI,KAAK,mBAAoB,KAAK,EAC9F,KAAK,WAAa,UAAU,KAC5B,KAAK,iBAAmB,EAExB,KAAK,eAAe,CACrB,GAGQA,EAAA,iBAAa,GAAyB,CAC7C,MAAME,EAAiC,KAAK,MAAM,EAAE,IAAI,EAKxD,OAJIA,EAAQ,KAAOC,EAAe,UACjC,KAAK,OAAO,MAAM,gBAAgBD,EAAQ,EAAE,GAAIA,CAAO,EAGhDA,EAAQ,GAAI,CACnB,KAAKC,EAAe,SACnB,KAAK,eAAeD,CAAO,EAC3B,MACD,KAAKC,EAAe,UACnB,KAAK,cAAc,EACnB,MACD,KAAKA,EAAe,UACnB,KAAK,gBAAgB,EACrB,MACD,KAAKA,EAAe,eACd,KAAA,qBAAqBD,EAAQ,CAAC,EACnC,MACD,KAAKC,EAAe,MACd,KAAA,YAAYD,EAAQ,CAAC,EAC1B,MACD,KAAKC,EAAe,aACnB,KAAK,mBAAmB,EACxB,MACD,QACM,KAAA,OAAO,MAAM,yBAAyB,EAC3C,KAAA,CAEH,GAEQH,EAAA,eAAW,GAAa,CAC1B,KAAA,OAAO,MAAM,yBAA0B,CAAC,CAC9C,GAEQA,EAAA,eAAW,GAAkB,CACpC,KAAK,WAAa,UAAU,OACvB,KAAA,YAAY,EAAE,IAAI,CACxB,GAEQA,EAAA,gBAAYE,GAAgC,CAC/C,GAAA,CAAC,KAAK,OAAQ,CACZ,KAAA,OAAO,MAAM,oBAAoB,EACtC,MAAA,CAGD,GAAI,KAAK,OAAO,aAAe,UAAU,KAAM,CAC9C,KAAK,OAAO,MAAM,mCAAmC,KAAK,OAAO,UAAU,EAAE,EAC7E,MAAA,CAED,KAAK,OAAO,MAAM,gBAAgBA,EAAQ,EAAE,GAAIA,CAAO,EACvD,KAAK,OAAO,KAAK,KAAK,UAAUA,CAAO,CAAC,CACzC,GAKQF,EAAA,sBAAiB,IAAM,CAE1B,GADC,KAAA,OAAO,MAAM,uBAAuB,EACrC,CAAC,KAAK,IAAI,MACN,OAAA,KAAK,OAAO,MAAM,8BAA8B,EAEnD,KAAA,kBAAoB,KAAK,IAAI,EAElC,MAAME,EAA2B,CAChC,GAAIC,EAAe,SACnB,EAAG,CACF,MAAO,KAAK,IAAI,MAChB,aAAc,MACd,QAAS,QACT,WAAY,CAAC,EACb,SAAU,GACV,SAAU,CACT,OAAQC,EAAqB,OAC7B,MAAO,KAAK,IAAI,EAChB,WAAY,CAAC,EACb,IAAK,EAAA,CACN,CAEF,EACA,KAAK,SAASF,CAAO,CACtB,GAKQF,EAAA,4BAAwBK,GAAuB,CACtD,KAAK,QAAQ,EAEb,KAAK,OAAO,MAAM,yCAAyCA,CAAS,EAAE,CAMvE,GA4BQL,EAAA,mBAAeM,GAA2B,CACjD,KAAK,kBAAoBA,EAAK,mBAC9B,KAAK,iBAAmB,KAAK,kBAC7B,KAAK,OAAO,KACX,+BAA+BA,EAAK,kBAAkB,UAAU,KAAK,IAAI,EAAI,KAAK,mBAAoB,KACvG,EACA,KAAK,iBAAiB,CACvB,GAoBQN,EAAA,mBAAeO,GAA6B,CAGnD,GAFA,KAAK,QAAQ,EAETA,IAAS,KAAM,CACb,KAAA,OAAO,KAAK,2CAA2C,EAG5D,KAAK,IAAI,OAAO,EAChB,KAAK,MAAM,EACN,KAAA,IAAI,cAAc,EAAK,EAC5B,MAAA,CAIGA,IAAS,OAET,KAAK,mBAAqB,EAAG,KAAK,iBAAmBV,OAC/C,kBAAoBA,EAE9B,KAAK,OAAO,MACX,8BAA8BU,CAAI,wBAAwB,KAAK,iBAAmB,KAAM,QACvF,CAAA,CACA,WACF,EAEA,KAAK,eAAe,EACrB,GAKQP,EAAA,aAAQ,IAAM,CACrB,KAAK,UAAY,KACjB,KAAK,SAAW,EAChB,KAAK,WAAa,UAAU,MAC7B,GAKQA,EAAA,wBAAmB,IAAM,CAC5B,KAAK,cACR,cAAc,KAAK,WAAW,EAC9B,KAAK,YAAc,MAGpB,MAAMQ,EAAgB,IAAM,CACvB,KAAK,cACR,KAAK,aAAe,GACpB,KAAK,cAAc,GAEnB,KAAK,uBAAuB,CAE9B,EAEA,KAAK,wBAA0B,WAC9B,IAAM,CACL,KAAK,wBAA0B,KAC/B,KAAK,YAAc,YAAYA,EAAe,KAAK,iBAAkB,EACvDA,EAAA,CACf,EACA,KAAK,MAAM,KAAK,OAAO,EAAI,KAAK,iBAAkB,CACnD,CACD,GAKQR,EAAA,uBAAkB,IAAM,CAC3B,KAAK,cACR,cAAc,KAAK,WAAW,EAC9B,KAAK,YAAc,MAGhB,KAAK,0BACR,aAAa,KAAK,uBAAuB,EACzC,KAAK,wBAA0B,KAEjC,GAKQA,EAAA,8BAAyB,IAAM,OACtC,KAAK,OAAO,KACX,gDAAgDH,EAAoB,KAAM,QAAQ,CAAC,CAAC,UACrF,GAEKY,EAAA,KAAA,SAAA,MAAAA,EAAQ,MAAM,MAEnB,KAAK,QAAQ,EACb,KAAK,MAAM,EAEX,KAAK,eAAe,CACrB,GAKQT,EAAA,qBAAgB,IAAM,CAC7B,MAAME,EAA4B,CACjC,GAAIC,EAAe,UACnB,EAAG,KAAK,QACT,EACK,KAAA,OAAO,MAAM,mBAAmB,EACrC,KAAK,SAASD,CAAO,CACtB,GAKQF,EAAA,eAAU,IAAM,CAClB,KAAA,OAAO,MAAM,aAAa,EAC/B,KAAK,gBAAgB,EACrB,KAAK,OAAS,IACf,GAKQA,EAAA,0BAAqB,IAAM,CAC7B,KAAA,OAAO,MAAM,wBAAwB,EAC1C,KAAK,aAAe,EACrB,GAKQA,EAAA,sBAAkBM,GAAiC,CAC1D,KAAM,CAAE,EAAAI,EAAG,EAAAC,EAAG,EAAAC,CAAM,EAAAN,EACpB,KAAK,OAAO,MAAM,gBAAgBK,CAAC,GAAID,CAAC,EACxC,KAAK,SAAWE,EAChB,MAAMC,EAAU,KAAK,iBAAiB,IAAIF,CAAC,EAC3C,GAAI,CAACE,EAAS,CACb,KAAK,OAAO,MAAM,iCAAiCF,CAAC,EAAE,EACtD,MAAA,CAGDE,EAAQH,CAAC,CACV,GAKQV,EAAA,iBAAY,IAAM,CACpB,KAAA,OAAO,MAAM,SAAS,CAC5B,GAKQA,EAAA,eAAWM,GAAmC,CAChD,KAAA,OAAO,KAAK,gBAAgB,KAAK,MAAQ,KAAK,mBAAoB,IAAI,EACrE,KAAA,CAAE,WAAAQ,EAAY,OAAAC,EAAQ,MAAAC,EAAO,KAAAC,EAAM,iBAAAC,EAAkB,SAAAC,EAAU,WAAAC,GAAed,EAgBpF,GAfA,KAAK,UAAYQ,EACjB,KAAK,QAAWK,GAAA,YAAAA,EAA+B,KAAME,GAAMA,EAAE,aAAeP,GAEvE,KAAA,IAAI,QAAQG,CAAI,EAEhB,KAAA,IAAI,OAAO,OAAOF,CAAM,EACxB,KAAA,IAAI,OAAO,uBAAuB,EACnCC,GACE,KAAA,IAAI,MAAM,OAAOA,CAAK,EAI5B,KAAK,IAAI,eAAe,OAAOI,GAAA,YAAAA,EAAY,OAAO,EAC7C,KAAA,IAAI,gBAAgB,OAAOF,CAAgB,EAE5CZ,EAAK,eAEG,UAAAgB,KAAMhB,EAAK,eACrB,UAAWiB,KAAKD,EAAI,CACnB,MAAME,EAAQ,KAAK,IAAI,OAAO,IAAID,EAAE,QAAQ,EAC5C,GAAI,CAACC,EAAO,CACN,KAAA,OAAO,KAAK,iBAAiBD,EAAE,QAAQ,yBAAyBA,EAAE,EAAE,EAAE,EAC3E,QAAA,CAEKC,EAAA,QAAQ,IAAID,CAAC,CAAA,CAKtB,KAAK,iBAAmB,EACnB,KAAA,IAAI,gBAAgB,EAAI,CAC9B,GAEOvB,EAAA,qBAAgB,CAACyB,EAAoBC,IAAyB,CAGhE,IAFkB,KAAK,oBAAoB,IAAID,CAAO,GAAK,CAAC,GAE9C,SAASC,CAAS,EAAG,OACvC,MAAMxB,EAAkC,CACvC,SAAUuB,EAIV,SAAU,CACT,CAACC,CAAS,EAAG,CAAC,CAAC,EAAG,EAAE,CAAC,CAAA,CAEvB,EACA,KAAK,oBAAoB,IAAID,EAAS,CAACC,CAAS,CAAC,EAEjD,KAAK,SAAS,CACb,GAAIvB,EAAe,YACnB,EAAGD,CAAA,CACmB,CACxB,GAIQF,EAAA,qBAAiBM,GAAyC,CAC5D,KAAA,OAAO,MAAM,6BAA6B,EAC/CqB,EAAY,IAAM,CACZ,KAAA,IAAI,OAAO,IAAI,CACnB,GAAGrB,EACH,GAAGA,EAAK,UAAA,CACmB,CAAA,CAC5B,CACF,GAEQN,EAAA,qBAAiBM,GAAyC,OAC5D,KAAA,OAAO,MAAM,6BAA6B,GAC/CG,EAAA,KAAK,IAAI,OAAO,IAAIH,EAAK,EAAE,IAA3B,MAAAG,EAA8B,OAAOH,EACtC,GAEQN,EAAA,qBAAiBM,GAAyC,CAC5D,KAAA,OAAO,MAAM,6BAA6B,EAC/CqB,EAAY,IAAM,CACjB,KAAK,IAAI,OAAO,OAAOrB,EAAK,EAAE,CAAA,CAC9B,CACF,GAEQN,EAAA,wBAAoBM,GAA4C,OAClE,KAAA,OAAO,MAAM,+BAA+B,EACjD,MAAMkB,EAAQ,KAAK,IAAI,OAAO,IAAIlB,EAAK,QAAQ,EAC/C,GAAI,CAACkB,EAAO,CACN,KAAA,OAAO,KAAK,0BAA0BlB,EAAK,QAAQ,0BAAyBG,EAAAH,EAAK,OAAL,YAAAG,EAAW,EAAE,EAAE,EAChG,MAAA,CAEKe,EAAA,QAAQ,IAAIlB,CAAI,CACvB,GAEQN,EAAA,2BAAuBM,GAA+C,CACxE,KAAA,OAAO,MAAM,kCAAkC,EACpD,MAAMkB,EAAQ,KAAK,IAAI,OAAO,IAAIlB,EAAK,QAAQ,EAC/C,GAAI,CAACkB,EAAO,CACN,KAAA,OAAO,KAAK,6BAA6BlB,EAAK,QAAQ,yBAAyBA,EAAK,KAAK,EAAE,EAAE,EAClG,MAAA,CAEDkB,EAAM,QAAQ,OAAOlB,EAAK,KAAK,EAAE,CAClC,GAEQN,EAAA,2BAAuBM,GAA+C,CACxE,KAAA,OAAO,MAAM,kCAAkC,EACpD,MAAMkB,EAAQ,KAAK,IAAI,OAAO,IAAIlB,EAAK,QAAQ,EAC/C,GAAI,CAACkB,EAAO,CACN,KAAA,OAAO,KAAK,6BAA6BlB,EAAK,QAAQ,yBAAyBA,EAAK,KAAK,EAAE,EAAE,EAClG,MAAA,CAEKkB,EAAA,QAAQ,OAAOlB,CAAsB,CAC5C,GAEQN,EAAA,+BAA2BM,GAAmD,CAChF,KAAA,OAAO,MAAM,sCAAsC,EAClD,KAAA,CAAE,SAAAsB,GAAatB,EACfkB,EAAQ,KAAK,IAAI,OAAO,IAAII,CAAQ,EAE1C,GAAI,CAACJ,EAAO,CACX,KAAK,OAAO,KAAK,iCAAiCI,CAAQ,YAAY,EACtE,MAAA,CAGDJ,EAAM,iBAAiBlB,CAAI,CAC5B,GAEQN,EAAA,uBAAmBM,GAA2C,CACrE,GAAIA,EAAK,OAASuB,EAAY,IAAMvB,EAAK,OAASuB,EAAY,QAAS,CACjE,KAAA,IAAI,gBAAgB,IAAIvB,CAAI,EACjC,MAAA,CAGD,MAAMkB,EAAQ,KAAK,IAAI,OAAO,IAAIlB,EAAK,QAAS,EAChD,GAAI,CAACkB,EAAO,CACN,KAAA,OAAO,KAAK,yBAAyBlB,EAAK,QAAQ,0BAA0BA,EAAK,EAAE,EAAE,EAC1F,MAAA,CAEDkB,EAAM,WAAWlB,CAAI,CACtB,GAEQN,EAAA,uBAAmBM,GAA2C,CACrE,GAAIA,EAAK,OAASuB,EAAY,IAAMvB,EAAK,OAASuB,EAAY,QAAS,CACjE,KAAA,IAAI,gBAAgB,OAAOvB,CAAI,EACpC,MAAA,CAGD,MAAMkB,EAAQ,KAAK,IAAI,OAAO,IAAIlB,EAAK,QAAS,EAChD,GAAI,CAACkB,EAAO,CACN,KAAA,OAAO,KAAK,yBAAyBlB,EAAK,QAAQ,0BAA0BA,EAAK,EAAE,EAAE,EAC1F,MAAA,CAEDkB,EAAM,cAAclB,CAAI,CACzB,GAEQN,EAAA,uBAAmBM,GAA2C,CACrE,GAAIA,EAAK,OAASuB,EAAY,IAAMvB,EAAK,OAASuB,EAAY,QAAS,CACtE,KAAK,IAAI,gBAAgB,OAAOvB,EAAK,EAAE,EACvC,MAAA,CAGD,MAAMkB,EAAQ,KAAK,IAAI,OAAO,IAAIlB,EAAK,QAAS,EAChD,GAAI,CAACkB,EAAO,CACN,KAAA,OAAO,KAAK,yBAAyBlB,EAAK,QAAQ,0BAA0BA,EAAK,EAAE,EAAE,EAC1F,MAAA,CAEKkB,EAAA,cAAclB,EAAK,EAAE,CAC5B,GAEQN,EAAA,oBAAgBM,GAAsE,CAE7F,MAAMwB,EAAY,KAAK,IAAI,eAAe,IAAIxB,EAAK,UAAU,EAC7D,GAAI,CAACwB,EAAW,CACf,KAAK,OAAO,KAAK,gDAAgDxB,EAAK,UAAU,EAAE,EAClF,MAAA,CAGDqB,EAAY,IAAM,CACjBG,EAAU,cAAgBxB,EAAK,UAAA,CAC/B,EAED,KAAK,OAAO,MACX,8DAA8DA,EAAK,UAAU,OAAOA,EAAK,UAAU,EACpG,CACD,GAEQN,EAAA,uBAAmBM,GAA2C,CAErE,GAAI,CADU,KAAK,IAAI,OAAO,IAAIA,EAAK,QAAS,EACpC,CACN,KAAA,OAAO,KAAK,yBAAyBA,EAAK,QAAQ,0BAA0BA,EAAK,EAAE,EAAE,EAC1F,MAAA,CAED,MAAMyB,EAAU,KAAK,IAAI,SAAS,IAAIzB,EAAK,UAAU,EACrD,GAAI,CAACyB,EAAS,CACR,KAAA,OAAO,KAAK,2BAA2BzB,EAAK,UAAU,0BAA0BA,EAAK,EAAE,EAAE,EAC9F,MAAA,CAGOyB,EAAA,SAAS,IAAIzB,CAAI,EACpB,KAAA,IAAI,MAAM,sBAAsBA,CAAI,CAC1C,GAEQN,EAAA,uBAAmBM,GAA2C,CAErE,GAAI,CADU,KAAK,IAAI,OAAO,IAAIA,EAAK,QAAS,EACpC,CACN,KAAA,OAAO,KAAK,yBAAyBA,EAAK,QAAQ,0BAA0BA,EAAK,EAAE,EAAE,EAC1F,MAAA,CAED,MAAMyB,EAAU,KAAK,IAAI,SAAS,IAAIzB,EAAK,UAAU,EACrD,GAAI,CAACyB,EAAS,CACR,KAAA,OAAO,KAAK,2BAA2BzB,EAAK,UAAU,0BAA0BA,EAAK,EAAE,EAAE,EAC9F,MAAA,CAGOyB,EAAA,SAAS,OAAOzB,CAAkB,CAC3C,GAEQN,EAAA,uBAAmBM,GAA2C,CAErE,GAAI,CADU,KAAK,IAAI,OAAO,IAAIA,EAAK,QAAS,EACpC,CACN,KAAA,OAAO,KAAK,yBAAyBA,EAAK,QAAQ,0BAA0BA,EAAK,EAAE,EAAE,EAC1F,MAAA,CAED,MAAMyB,EAAU,KAAK,IAAI,SAAS,IAAIzB,EAAK,UAAU,EACrD,GAAI,CAACyB,EAAS,CACR,KAAA,OAAO,KAAK,2BAA2BzB,EAAK,UAAU,0BAA0BA,EAAK,EAAE,EAAE,EAC9F,MAAA,CAGOyB,EAAA,SAAS,OAAOzB,EAAK,EAAE,CAChC,GAEQN,EAAA,2BAAuBM,GAA+C,CAE7E,GAAI,CADU,KAAK,IAAI,OAAO,IAAIA,EAAK,QAAS,EACpC,CACX,KAAK,OAAO,KAAK,6BAA6BA,EAAK,QAAQ,aAAa,EACxE,MAAA,CAED,MAAMyB,EAAU,KAAK,IAAI,SAAS,IAAIzB,EAAK,UAAU,EACrD,GAAI,CAACyB,EAAS,CACb,KAAK,OAAO,KAAK,+BAA+BzB,EAAK,UAAU,aAAa,EAC5E,MAAA,CAGU,UAAA0B,KAAM1B,EAAK,IACbyB,EAAA,SAAS,OAAOC,CAAE,CAE5B,GAEQhC,EAAA,wBAAoBM,GAA4C,CAClE,KAAA,IAAI,UAAU,OAAOA,CAAI,CAC/B,GAEQN,EAAA,qBAAiBM,GAAyC,OAEjE,GAAI,CADU,KAAK,IAAI,OAAO,IAAIA,EAAK,QAAS,EACpC,CACN,KAAA,OAAO,KAAK,uBAAuBA,EAAK,QAAQ,0BAA0BA,EAAK,UAAU,EAAE,EAChG,MAAA,CAED,MAAMyB,EAAU,KAAK,IAAI,SAAS,IAAIzB,EAAK,UAAU,EACrD,GAAI,CAACyB,EAAS,CACb,KAAK,OAAO,KAAK,yBAAyBzB,EAAK,UAAU,YAAY,EACrE,MAAA,CAGK,MAAA2B,EAAOC,EAAS,IAAM,CACtB,KAAA,OAAO,MAAM,iBAAiB5B,EAAK,OAAO,0BAA0ByB,EAAQ,EAAE,EAAE,EACrFJ,EAAY,IAAMI,EAAQ,UAAU,OAAOzB,EAAK,OAAO,CAAC,GACtD,IAAM,EAEJyB,EAAQ,UAAU,IAAIzB,EAAK,OAAO,GAIjC,KAAA,OAAO,MAAM,iBAAiBA,EAAK,OAAO,uBAAuByB,EAAQ,EAAE,EAAE,GAClFtB,EAAAsB,EAAQ,UAAU,IAAIzB,EAAK,OAAO,IAAlC,MAAAG,MAJAkB,EAAY,IAAMI,EAAQ,UAAU,IAAIzB,EAAK,QAAS2B,CAAI,CAAC,EACtDA,EAAA,EAKP,GAEQjC,EAAA,oBAAgBM,GAAwC,CAC1D,KAAA,IAAI,MAAM,OAAOA,CAAI,EAEtBA,EAAK,KAAO,KAAK,IAAI,QAAS,IAC5B,KAAA,IAAI,QAAQA,CAAI,CAEvB,GAlqBC,KAAK,IAAMP,EAEXoC,EAAe,IAAI,CAAA,CAOpB,MAAM,QAAQC,EAAa,CACtB,GAAA,CAAC,KAAK,IAAK,CACR,MAAAC,EAAS,IAAI,IAAID,CAAG,EACnBC,EAAA,aAAa,OAAO,IAAK1C,CAAe,EACxC0C,EAAA,aAAa,OAAO,WAAYzC,CAAgB,EACvD,KAAK,IAAMyC,EAAO,IAAA,CAEnB,KAAK,OAAO,MAAM,aAAa,KAAK,GAAG,EAAE,EACpC,KAAA,oBAAsB,KAAK,IAAI,EACpC,KAAK,OAAS,IAAI,UAAU,KAAK,GAAG,EACpC,KAAK,WAAa,UAAU,WAE5B,KAAK,eAAe,EACpB,KAAK,qBAAqB,CAAA,CAI3B,MAAM,WAAW9B,EAAe+B,EAAiB,OAC3C,KAAK,SAIV,KAAK,WAAa,UAAU,QAC5B,KAAK,OAAO,MAAM,gBAAgB,KAAK,GAAG,EAAE,GACvC7B,EAAA,KAAA,SAAA,MAAAA,EAAQ,MAAMF,EAAM+B,GAAM,CAGhC,gBAAiB,CACZ,KAAK,eACT,KAAK,aAAe,GACpB,WAAW,IAAM,CAChB,KAAK,aAAe,GACf,KAAA,OAAO,MAAM,uBAAuB,EACpC,KAAA,QAAQ,KAAK,GAAI,CAAA,EACpB,KAAK,gBAAgB,EAAA,CAGjB,gBAAiB,CACnB,KAAA,OAAQ,OAAS,KAAK,OACtB,KAAA,OAAQ,UAAY,KAAK,UACzB,KAAA,OAAQ,QAAU,KAAK,QACvB,KAAA,OAAQ,QAAU,KAAK,OAAA,CAGrB,sBAAuB,CAC9B,KAAK,iBAAiB,IAAIC,EAAsB,MAAO,KAAK,OAAO,EACnE,KAAK,iBAAiB,IAAIA,EAAsB,QAAS,KAAK,SAAS,EACvE,KAAK,iBAAiB,IAAIA,EAAsB,YAAa,KAAK,aAAa,EAC/E,KAAK,iBAAiB,IAAIA,EAAsB,YAAa,KAAK,aAAa,EAC/E,KAAK,iBAAiB,IAAIA,EAAsB,YAAa,KAAK,aAAa,EAC/E,KAAK,iBAAiB,IAAIA,EAAsB,eAAgB,KAAK,gBAAgB,EACrF,KAAK,iBAAiB,IAAIA,EAAsB,kBAAmB,KAAK,mBAAmB,EAC3F,KAAK,iBAAiB,IAAIA,EAAsB,kBAAmB,KAAK,mBAAmB,EAC3F,KAAK,iBAAiB,IAAIA,EAAsB,sBAAuB,KAAK,uBAAuB,EAEnG,KAAK,iBAAiB,IAAIA,EAAsB,cAAe,KAAK,eAAe,EACnF,KAAK,iBAAiB,IAAIA,EAAsB,cAAe,KAAK,eAAe,EACnF,KAAK,iBAAiB,IAAIA,EAAsB,cAAe,KAAK,eAAe,EAEnF,KAAK,iBAAiB,IAAI,cAAe,KAAK,YAAY,EAE1D,KAAK,iBAAiB,IAAIA,EAAsB,cAAe,KAAK,eAAe,EACnF,KAAK,iBAAiB,IAAIA,EAAsB,cAAe,KAAK,eAAe,EACnF,KAAK,iBAAiB,IAAIA,EAAsB,cAAe,KAAK,eAAe,EACnF,KAAK,iBAAiB,IAAIA,EAAsB,kBAAmB,KAAK,mBAAmB,EAE3F,KAAK,iBAAiB,IAAIA,EAAsB,eAAgB,KAAK,gBAAgB,EAErF,KAAK,iBAAiB,IAAIA,EAAsB,YAAa,KAAK,aAAa,EAE/E,KAAK,iBAAiB,IAAIA,EAAsB,WAAY,KAAK,YAAY,CAAA,CAgHtE,iBAAkB,CACzB,KAAK,QAAQ,EACR,KAAA,OAAO,MAAM,oBAAoB,EAEtC,KAAK,eAAe,CAAA,CAGb,cAAe,CAElB,GADC,KAAA,OAAO,MAAM,qBAAqB,EACnC,CAAC,KAAK,IAAI,MACN,OAAA,KAAK,OAAO,MAAM,8BAA8B,EAGxD,KAAK,SAAS,CACb,GAAIpC,EAAe,OACnB,EAAG,CACF,MAAO,KAAK,IAAI,MAChB,WAAY,KAAK,UACjB,IAAK,KAAK,QAAA,CACX,CACA,CAAA,CAYF,aAAaI,EAAqC,CACjD,GAAI,CAACA,EACG,MAAA,GAGR,OAAQA,EAAM,CACb,KAAKiC,EAAkB,qBACvB,KAAKA,EAAkB,aACvB,KAAKA,EAAkB,iBACvB,KAAKA,EAAkB,kBACvB,KAAKA,EAAkB,eACvB,KAAKA,EAAkB,kBACf,MAAA,GACR,QACQ,MAAA,EAAA,CACT,CAqbF,CAvrBqBC,EAAA,CAAnBC,CAAA,EAFmB5C,EAEA,UAAA,SAAA,CAAA,EACD2C,EAAA,CAAlBC,CAAA,EAHmB5C,EAGD,UAAA,YAAA,CAAA,EACA2C,EAAA,CAAlBC,CAAA,EAJmB5C,EAID,UAAA,UAAA,CAAA,EACA2C,EAAA,CAAlBC,CAAA,EALmB5C,EAKD,UAAA,aAAA,CAAA,EA0Bb2C,EAAA,CADLE,CAAA,EA9BmB7C,EA+Bd,UAAA,UAAA,CAAA,EAiBA2C,EAAA,CADLE,CAAA,EA/CmB7C,EAgDd,UAAA,aAAA,CAAA"}