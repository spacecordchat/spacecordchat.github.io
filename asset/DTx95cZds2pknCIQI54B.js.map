{"version":3,"file":"DTx95cZds2pknCIQI54B.js","sources":["../../src/components/markdown/MarkdownRenderer.tsx"],"sourcesContent":["import { FormattingPatterns } from \"@spacebarchat/spacebar-api-types/v9\";\nimport Marked, { ReactRenderer } from \"marked-react\";\nimport React from \"react\";\nimport reactStringReplace from \"react-string-replace\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport { materialDark } from \"react-syntax-highlighter/dist/cjs/styles/prism\";\nimport styled from \"styled-components\";\nimport CodeBlock from \"../Codeblock\";\nimport Link from \"../Link\";\nimport Spoiler from \"../Spoiler\";\nimport { MarkdownProps } from \"./Markdown\";\nimport Mention from \"./Mention\";\nimport Timestamp from \"./Timestamp\";\n\nconst Container = styled.div`\n\t// remove the excessive left padding, and margin in lists\n\tul,\n\tol {\n\t\tpadding: 0 0 0 15px;\n\t\tmargin: 0;\n\t}\n\n\tblockquote {\n\t\tmargin: 2px 0;\n\t\tpadding: 5px 15px;\n\t\tbackground-color: transparent;\n\t\twidth: fit-content;\n\t\tborder-radius: 4px;\n\t\tborder-inline-start: 4px solid var(--interactive);\n\t}\n\n\tcode.inline {\n\t\tbackground-color: var(--background-secondary);\n\t\tpadding: 2px 4px;\n\t\tborder-radius: 4px;\n\t\tfont-size: 80%;\n\t\tfont-family: var(--font-family-code);\n\t}\n\n\tcode {\n\t\tfont-size: 85%;\n\t}\n\n\t.syntaxHighlighter {\n\t\t// remove excessive left \"padding\" in line numbers\n\t\t.linenumber {\n\t\t\tmin-width: 0 !important;\n\t\t}\n\n\t\t// append vertical pipe to line numbers\n\t\t.linenumber::after {\n\t\t\tcontent: \" |\";\n\t\t}\n\t}\n`;\n\n/**\n * Regex for matching execessive recursion of blockquotes and lists\n */\nconst RE_RECURSIVE = /(^(?:[>*+-][^\\S\\r\\n]*){5})(?:[>*+-][^\\S\\r\\n]*)+(.*$)/gm;\n\n/**\n * Regex for matching multi-line blockquotes\n */\nconst RE_BLOCKQUOTE = /^([^\\S\\r\\n]*>[^\\n]+\\n?)+/gm;\n\n/**\n * Regex for matching HTML tags\n */\nconst RE_HTML_TAGS = /^(<\\/?[a-zA-Z0-9]+>)(.*$)/gm;\n\n/**\n * Regex for matching empty lines\n */\nconst RE_EMPTY_LINE = /^\\s*?$/gm;\n\n/**\n * Regex for matching line starting with plus\n */\nconst RE_PLUS = /^\\s*\\+(?:$|[^+])/gm;\n\n/**\n * Sanitise Markdown input before rendering\n * @param content Input string\n * @returns Sanitised string\n */\nfunction sanitize(content: string) {\n\treturn (\n\t\tcontent\n\t\t\t// Strip excessive blockquote or list indentation\n\t\t\t.replace(RE_RECURSIVE, (_, m0, m1) => m0 + m1)\n\n\t\t\t// Append empty character if string starts with html tag\n\t\t\t// This is to avoid inconsistencies in rendering Markdown inside/after HTML tags\n\t\t\t// https://github.com/revoltchat/revite/issues/733\n\t\t\t.replace(RE_HTML_TAGS, (match) => `\\u200E${match}`)\n\n\t\t\t// Append empty character if line starts with a plus\n\t\t\t// which would usually open a new list but we want\n\t\t\t// to avoid that behaviour in our case.\n\t\t\t.replace(RE_PLUS, (match) => `\\u200E${match}`)\n\n\t\t\t// Replace empty lines with non-breaking space\n\t\t\t// because remark renderer is collapsing empty\n\t\t\t// or otherwise whitespace-only lines of text\n\t\t\t.replace(RE_EMPTY_LINE, \"â€Ž\")\n\n\t\t\t// Ensure empty line after blockquotes for correct rendering\n\t\t\t.replace(RE_BLOCKQUOTE, (match) => `${match}\\n`)\n\t);\n}\n\nconst customRenderer: Partial<ReactRenderer> = {\n\tcode: (content: string, lang: string) => (\n\t\t<CodeBlock lang={lang}>\n\t\t\t<SyntaxHighlighter\n\t\t\t\tclassName=\"syntaxHighlighter\"\n\t\t\t\tchildren={content}\n\t\t\t\tlanguage={lang}\n\t\t\t\tstyle={materialDark}\n\t\t\t\tshowLineNumbers={true}\n\t\t\t\tshowInlineLineNumbers={true}\n\t\t\t\tPreTag=\"div\"\n\t\t\t/>\n\t\t</CodeBlock>\n\t),\n\tcodespan: (content: string) => <code className=\"inline\">{content}</code>,\n\tlink: (href, text) => (\n\t\t<Link href={href} target=\"_blank\" rel=\"noreferrer noopener\">\n\t\t\t{text}\n\t\t</Link>\n\t),\n\t// prevent renderer from wrapping everything in a <p> tag\n\tparagraph: (content: React.ReactNode[]) => {\n\t\tif (\n\t\t\tcontent.length === 1 &&\n\t\t\tArray.isArray(content[0]) &&\n\t\t\tcontent[0].length === 1 &&\n\t\t\ttypeof content[0][0] === \"string\"\n\t\t) {\n\t\t\treturn <span>{content}</span>;\n\t\t}\n\n\t\treturn <>{content}</>;\n\t},\n\ttext: (text: string) => {\n\t\tlet replaced: string | React.ReactNode[] = text;\n\t\tconst SpoilerRegex = /\\|\\|(?<content>[\\s\\S]+?)\\|\\|/;\n\n\t\t// replace the spoiler with the spoiler component\n\t\treplaced = reactStringReplace(text, SpoilerRegex, (match, i) => {\n\t\t\treturn <Spoiler key={i} children={match} />;\n\t\t});\n\n\t\treplaced = reactStringReplace(replaced, FormattingPatterns.DefaultStyledTimestamp, (match, i) => (\n\t\t\t<Timestamp key={i} timestamp={match} />\n\t\t));\n\n\t\treplaced = reactStringReplace(replaced, /<t:-?(\\d{1,13}:[tTdDfFR])>/, (match, i) => {\n\t\t\tconst parts = match.split(\":\");\n\t\t\tconst timestamp = parts[0];\n\t\t\tconst style = parts[1];\n\n\t\t\treturn <Timestamp key={i} timestamp={timestamp} style={style} />;\n\t\t});\n\n\t\treplaced = reactStringReplace(replaced, FormattingPatterns.Channel, (match, i) => (\n\t\t\t<Mention key={i} type=\"channel\" id={match} />\n\t\t));\n\n\t\treplaced = reactStringReplace(replaced, FormattingPatterns.User, (match, i) => (\n\t\t\t<Mention key={i} type=\"user\" id={match} />\n\t\t));\n\n\t\treplaced = reactStringReplace(replaced, FormattingPatterns.Role, (match, i) => (\n\t\t\t<Mention key={i} type=\"role\" id={match} />\n\t\t));\n\n\t\treplaced = reactStringReplace(replaced, /(@everyone|@here)/, (match, i) => (\n\t\t\t<Mention key={i} type=\"text\" id={match} />\n\t\t));\n\n\t\treturn replaced;\n\t},\n};\n\nexport default React.memo(({ content }: MarkdownProps) => {\n\tconst sanitizedContent = React.useMemo(() => sanitize(content), [content]);\n\n\treturn (\n\t\t<Container>\n\t\t\t<Marked breaks gfm openLinksInNewTab renderer={customRenderer}>\n\t\t\t\t{sanitizedContent}\n\t\t\t</Marked>\n\t\t</Container>\n\t);\n});\n"],"names":["Container","styled","RE_RECURSIVE","RE_BLOCKQUOTE","RE_HTML_TAGS","RE_EMPTY_LINE","RE_PLUS","sanitize","content","_","m0","m1","match","customRenderer","lang","jsx","CodeBlock","SyntaxHighlighter","materialDark","href","text","Link","replaced","reactStringReplace","i","Spoiler","FormattingPatterns","Timestamp","parts","timestamp","style","Mention","Markdown","React","sanitizedContent","Marked"],"mappings":"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"}