{"version":3,"file":"XE3i2DAhVgCbWfDWbO6w.js","sources":["../../src/components/messaging/MessageInput.tsx"],"sourcesContent":["import Channel from \"../../stores/objects/Channel\";\n\nimport { ChannelType, MessageType, RESTPostAPIChannelMessageJSONBody } from \"@spacebarchat/spacebar-api-types/v9\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { modalController } from \"../../controllers/modals\";\nimport { useAppStore } from \"../../hooks/useAppStore\";\nimport useLogger from \"../../hooks/useLogger\";\nimport Guild from \"../../stores/objects/Guild\";\nimport Snowflake from \"../../utils/Snowflake\";\nimport { MAX_ATTACHMENTS } from \"../../utils/constants\";\nimport { debounce } from \"../../utils/debounce\";\nimport MessageTextArea from \"./MessageTextArea\";\nimport AttachmentUpload from \"./attachments/AttachmentUpload\";\nimport AttachmentUploadList from \"./attachments/AttachmentUploadPreview\";\n\nconst Container = styled.div`\n\tpadding: 0 16px;\n\tmargin-bottom: 25px;\n`;\n\nconst InnerWrapper = styled.div`\n\tbackground-color: var(--background-primary);\n\tpadding: 0 16px;\n\tborder-radius: 10px;\n\tdisplay: flex;\n\tflex-direction: column;\n`;\n\nconst InnerInnerWrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: row;\n`;\n\nconst UploadWrapper = styled.div`\n\tflex: 0 0 auto;\n\tposition: sticky;\n`;\n\nconst ButtonWrapper = styled.div`\n\theight: 45px;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n\ninterface Props {\n\tchannel: Channel;\n\tguild?: Guild;\n}\n\n/**\n * Component for sending messages\n */\nfunction MessageInput({ channel }: Props) {\n\tconst app = useAppStore();\n\tconst logger = useLogger(\"MessageInput\");\n\tconst [content, setContent] = React.useState(\"\");\n\tconst [attachments, setAttachments] = React.useState<File[]>([]);\n\n\t/**\n\t * Debounced stopTyping\n\t */\n\tconst debouncedStopTyping = React.useCallback(\n\t\tdebounce(() => channel.stopTyping(), 10_000),\n\t\t[channel],\n\t);\n\n\t/**\n\t * @returns Whether or not a message can be sent given the current state\n\t */\n\tconst canSendMessage = React.useCallback(() => {\n\t\tif (!attachments.length && (!content || !content.trim() || !content.replace(/\\r?\\n|\\r/g, \"\"))) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}, [attachments, content]);\n\n\tconst sendMessage = React.useCallback(async () => {\n\t\tchannel.stopTyping();\n\t\tconst shouldFail = app.experiments.isTreatmentEnabled(\"message_queue\", 2);\n\t\tconst shouldSend = !app.experiments.isTreatmentEnabled(\"message_queue\", 1);\n\n\t\tif (!canSendMessage() && !shouldFail) return;\n\n\t\tconst contentCopy = content;\n\t\tconst attachmentsCopy = attachments;\n\n\t\tsetContent(\"\");\n\t\tsetAttachments([]);\n\t\t// stop typing\n\t\tdebouncedStopTyping(true);\n\n\t\tconst nonce = Snowflake.generate();\n\t\tconst msg = app.queue.add({\n\t\t\tid: nonce,\n\t\t\tcontent: contentCopy,\n\t\t\tfiles: attachmentsCopy,\n\t\t\tauthor: app.account!.raw,\n\t\t\tchannel_id: channel.id,\n\t\t\tguild_id: channel.guildId,\n\t\t\ttimestamp: new Date().toISOString(),\n\t\t\ttype: MessageType.Default,\n\t\t});\n\n\t\tif (shouldSend) {\n\t\t\ttry {\n\t\t\t\tlet body: RESTPostAPIChannelMessageJSONBody | FormData;\n\t\t\t\tif (attachmentsCopy.length > 0) {\n\t\t\t\t\tconst data = new FormData();\n\t\t\t\t\tdata.append(\"payload_json\", JSON.stringify({ content, nonce }));\n\t\t\t\t\tattachmentsCopy.forEach((file, index) => {\n\t\t\t\t\t\tdata.append(`files[${index}]`, file);\n\t\t\t\t\t});\n\t\t\t\t\tbody = data;\n\t\t\t\t} else {\n\t\t\t\t\tbody = { content, nonce };\n\t\t\t\t}\n\t\t\t\tawait channel.sendMessage(body, msg);\n\t\t\t} catch (e) {\n\t\t\t\tconst error = e instanceof Error ? e.message : typeof e === \"string\" ? e : \"Unknown error\";\n\t\t\t\tmsg.fail(error);\n\t\t\t}\n\t\t} else if (shouldFail) {\n\t\t\tmsg.fail(\"Message queue experiment\");\n\t\t}\n\t}, [content, attachments, channel, canSendMessage]);\n\n\tconst onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n\t\tif (e.ctrlKey && e.key === \"Enter\") {\n\t\t\te.preventDefault();\n\t\t\treturn sendMessage();\n\t\t}\n\n\t\t// TODO: handle editing last message\n\n\t\tif (!e.shiftKey && e.key === \"Enter\") {\n\t\t\te.preventDefault();\n\t\t\treturn sendMessage();\n\t\t}\n\n\t\tif (e.key === \"Escape\") {\n\t\t\tif (attachments.length > 0) {\n\t\t\t\tsetAttachments([]);\n\t\t\t}\n\t\t}\n\n\t\tdebouncedStopTyping(true);\n\t};\n\n\tconst onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n\t\tsetContent(e.target.value);\n\t\tchannel.startTyping();\n\t};\n\n\tconst appendAttachment = (files: File[]) => {\n\t\tif (files.length === 0) return;\n\t\tif (files.length > MAX_ATTACHMENTS || attachments.length + files.length > MAX_ATTACHMENTS) {\n\t\t\tmodalController.push({\n\t\t\t\ttype: \"error\",\n\t\t\t\ttitle: \"Too many attachments\",\n\t\t\t\terror: `You can only attach ${MAX_ATTACHMENTS} files at once.`,\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tsetAttachments((prev) => [...prev, ...files]);\n\t};\n\n\treturn (\n\t\t<Container>\n\t\t\t<InnerWrapper>\n\t\t\t\t<AttachmentUploadList\n\t\t\t\t\tattachments={attachments}\n\t\t\t\t\tremove={(index) => {\n\t\t\t\t\t\tif (attachments.length === 0) return;\n\t\t\t\t\t\tif (attachments.length === 1) setAttachments([]);\n\t\t\t\t\t\telse setAttachments(attachments.filter((_, i) => i !== index));\n\t\t\t\t\t}}\n\t\t\t\t/>\n\n\t\t\t\t<InnerInnerWrapper>\n\t\t\t\t\t<UploadWrapper>\n\t\t\t\t\t\t{channel.hasPermission(\"ATTACH_FILES\") && channel.hasPermission(\"SEND_MESSAGES\") && (\n\t\t\t\t\t\t\t<AttachmentUpload append={appendAttachment} />\n\t\t\t\t\t\t)}\n\t\t\t\t\t</UploadWrapper>\n\t\t\t\t\t<MessageTextArea\n\t\t\t\t\t\tid=\"messageinput\"\n\t\t\t\t\t\t// maxLength={4000} // TODO: this should come from the server\n\t\t\t\t\t\tvalue={content}\n\t\t\t\t\t\tplaceholder={`Message ${\n\t\t\t\t\t\t\tchannel.type === ChannelType.DM ? channel.recipients?.[0].username : \"#\" + channel.name\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\tonChange={onChange}\n\t\t\t\t\t\tonKeyDown={onKeyDown}\n\t\t\t\t\t/>\n\t\t\t\t\t<ButtonWrapper>\n\t\t\t\t\t\t{/* <IconButton>\n\t\t\t\t\t\t<Icon icon=\"mdiStickerEmoji\" size=\"24px\" color=\"var(--text)\" />\n\t\t\t\t\t</IconButton> */}\n\t\t\t\t\t</ButtonWrapper>\n\t\t\t\t</InnerInnerWrapper>\n\t\t\t</InnerWrapper>\n\t\t</Container>\n\t);\n}\n\nexport default observer(MessageInput);\n"],"names":["Container","styled","InnerWrapper","InnerInnerWrapper","UploadWrapper","ButtonWrapper","MessageInput","channel","app","useAppStore","content","setContent","React","attachments","setAttachments","debouncedStopTyping","debounce","canSendMessage","sendMessage","shouldFail","shouldSend","contentCopy","attachmentsCopy","nonce","Snowflake","msg","MessageType","body","data","file","index","e","error","onKeyDown","onChange","appendAttachment","files","MAX_ATTACHMENTS","modalController","prev","jsx","jsxs","AttachmentUploadList","_","i","AttachmentUpload","MessageTextArea","ChannelType","_a","MessageInput$1","observer"],"mappings":"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"}