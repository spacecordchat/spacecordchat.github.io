{"version":3,"file":"dUGBKLyj-xkm7g1nKZBx.js","sources":["../../src/stores/AccountStore.ts"],"sourcesContent":["import type { APIUser } from \"@spacebarchat/spacebar-api-types/v9\";\nimport {\n\tCDNRoutes,\n\tDefaultUserAvatarAssets,\n\tImageFormat,\n\tUserFlags,\n\tUserPremiumType,\n} from \"@spacebarchat/spacebar-api-types/v9\";\nimport { observable } from \"mobx\";\nimport REST from \"../utils/REST\";\n\nexport default class AccountStore {\n\tid: string;\n\t@observable username: string;\n\t@observable discriminator: string;\n\t@observable avatar: string | null;\n\t@observable avatarDecoration?: unknown;\n\t@observable email: string | null = null;\n\t@observable verified = false;\n\t@observable bot = false;\n\t@observable system = false;\n\t@observable mfaEnabled = false;\n\t@observable premiumType?: UserPremiumType.NitroClassic | UserPremiumType.Nitro | UserPremiumType.NitroBasic;\n\t@observable flags?: UserFlags;\n\t@observable publicFlags?: UserFlags;\n\t@observable raw: APIUser;\n\t//   phone: string | null;\n\t//   nsfwAllowed: boolean | null;\n\n\tconstructor(user: APIUser) {\n\t\tthis.raw = user;\n\n\t\tthis.id = user.id;\n\t\tthis.username = user.username;\n\t\tthis.discriminator = user.discriminator;\n\t\tthis.avatar = user.avatar;\n\t\t// this.avatarDecoration = user.avatar_decoration;\n\t\tif (user.email) {\n\t\t\tthis.email = user.email;\n\t\t}\n\t\tif (user.verified) {\n\t\t\tthis.verified = user.verified;\n\t\t}\n\t\tif (user.bot) {\n\t\t\tthis.bot = user.bot;\n\t\t}\n\t\tif (user.system) {\n\t\t\tthis.system = user.system;\n\t\t}\n\t\tif (user.mfa_enabled) {\n\t\t\tthis.mfaEnabled = user.mfa_enabled;\n\t\t}\n\t\tif (user.premium_type) {\n\t\t\tthis.premiumType = user.premium_type;\n\t\t}\n\t\tif (user.flags) {\n\t\t\tthis.flags = user.flags;\n\t\t}\n\t\tif (user.public_flags) {\n\t\t\tthis.publicFlags = user.public_flags;\n\t\t}\n\t\t// this.phone = user.phone;\n\t\t// this.nsfwAllowed = user.nsfw_allowed;\n\t}\n\n\t/**\n\t * Gets the users default avatar url\n\t * @returns The URL to the user's default avatar.\n\t */\n\tget defaultAvatarUrl(): string {\n\t\treturn REST.makeCDNUrl(\n\t\t\tCDNRoutes.defaultUserAvatar((Number(this.discriminator) % 5) as DefaultUserAvatarAssets),\n\t\t);\n\t}\n\n\t/**\n\t * Gets the users display avatar url\n\t * @returns The URL to the user's avatar or the default avatar if they don't have one.\n\t */\n\tget avatarUrl(): string {\n\t\tif (this.avatar) return REST.makeCDNUrl(CDNRoutes.userAvatar(this.id, this.avatar, ImageFormat.PNG));\n\t\telse return this.defaultAvatarUrl;\n\t}\n}\n"],"names":["AccountStore","user","__publicField","REST","CDNRoutes","ImageFormat","__decorateClass","observable"],"mappings":"kZAWA,MAAqBA,CAAa,CAkBjC,YAAYC,EAAe,CAjB3BC,EAAA,WACYA,EAAA,iBACAA,EAAA,sBACAA,EAAA,eACAA,EAAA,yBACAA,EAAA,aAAuB,MACvBA,EAAA,gBAAW,IACXA,EAAA,WAAM,IACNA,EAAA,cAAS,IACTA,EAAA,kBAAa,IACbA,EAAA,oBACAA,EAAA,cACAA,EAAA,oBACAA,EAAA,YAKX,KAAK,IAAMD,EAEX,KAAK,GAAKA,EAAK,GACf,KAAK,SAAWA,EAAK,SACrB,KAAK,cAAgBA,EAAK,cAC1B,KAAK,OAASA,EAAK,OAEfA,EAAK,QACR,KAAK,MAAQA,EAAK,OAEfA,EAAK,WACR,KAAK,SAAWA,EAAK,UAElBA,EAAK,MACR,KAAK,IAAMA,EAAK,KAEbA,EAAK,SACR,KAAK,OAASA,EAAK,QAEhBA,EAAK,cACR,KAAK,WAAaA,EAAK,aAEpBA,EAAK,eACR,KAAK,YAAcA,EAAK,cAErBA,EAAK,QACR,KAAK,MAAQA,EAAK,OAEfA,EAAK,eACR,KAAK,YAAcA,EAAK,aACzB,CASD,IAAI,kBAA2B,CAC9B,OAAOE,EAAK,WACXC,EAAU,kBAAmB,OAAO,KAAK,aAAa,EAAI,CAA6B,CACxF,CAAA,CAOD,IAAI,WAAoB,CACvB,OAAI,KAAK,OAAeD,EAAK,WAAWC,EAAU,WAAW,KAAK,GAAI,KAAK,OAAQC,EAAY,GAAG,CAAC,EACvF,KAAK,gBAAA,CAEnB,CAtEaC,EAAA,CAAXC,CAAA,EAFmBP,EAER,UAAA,UAAA,EACAM,EAAA,CAAXC,CAAA,EAHmBP,EAGR,UAAA,eAAA,EACAM,EAAA,CAAXC,CAAA,EAJmBP,EAIR,UAAA,QAAA,EACAM,EAAA,CAAXC,CAAA,EALmBP,EAKR,UAAA,kBAAA,EACAM,EAAA,CAAXC,CAAA,EANmBP,EAMR,UAAA,OAAA,EACAM,EAAA,CAAXC,CAAA,EAPmBP,EAOR,UAAA,UAAA,EACAM,EAAA,CAAXC,CAAA,EARmBP,EAQR,UAAA,KAAA,EACAM,EAAA,CAAXC,CAAA,EATmBP,EASR,UAAA,QAAA,EACAM,EAAA,CAAXC,CAAA,EAVmBP,EAUR,UAAA,YAAA,EACAM,EAAA,CAAXC,CAAA,EAXmBP,EAWR,UAAA,aAAA,EACAM,EAAA,CAAXC,CAAA,EAZmBP,EAYR,UAAA,OAAA,EACAM,EAAA,CAAXC,CAAA,EAbmBP,EAaR,UAAA,aAAA,EACAM,EAAA,CAAXC,CAAA,EAdmBP,EAcR,UAAA,KAAA"}