{"version":3,"file":"ZhyKsKmtFcOrQvslQGtL.js","sources":["../../src/stores/objects/User.ts"],"sourcesContent":["import { Snowflake } from \"@spacebarchat/spacebar-api-types/globals\";\nimport type { APIUser, GatewayUserUpdateDispatchData, PublicUser } from \"@spacebarchat/spacebar-api-types/v9\";\nimport { CDNRoutes, DefaultUserAvatarAssets, ImageFormat } from \"@spacebarchat/spacebar-api-types/v9\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport REST from \"../../utils/REST\";\n\nexport default class User {\n\tid: Snowflake;\n\t@observable username: string;\n\t@observable discriminator: string;\n\t@observable avatar: string | null;\n\t@observable bot = false;\n\t@observable public_flags = 0;\n\t@observable bio = \"\";\n\t@observable premium_since: string | null = null;\n\t@observable premium_type = 0;\n\t@observable accent_color: unknown | null;\n\t@observable pronouns?: string;\n\t@observable theme_colors?: unknown;\n\t@observable raw: APIUser;\n\n\tconstructor(user: APIUser | PublicUser) {\n\t\tthis.raw = user;\n\n\t\tthis.id = user.id;\n\t\tthis.username = user.username;\n\t\tthis.discriminator = user.discriminator;\n\t\tthis.avatar = user.avatar;\n\t\tif (user.bot) {\n\t\t\tthis.bot = user.bot;\n\t\t}\n\t\tif (user.public_flags) {\n\t\t\tthis.public_flags = user.public_flags;\n\t\t}\n\t\tif (user.bio) {\n\t\t\tthis.bio = user.bio;\n\t\t}\n\t\tif (user.premium_since) {\n\t\t\tthis.premium_since = user.premium_since;\n\t\t}\n\t\tif (user.premium_type) {\n\t\t\tthis.premium_type = user.premium_type;\n\t\t}\n\t\tthis.pronouns = user.pronouns;\n\t\tthis.theme_colors = user.theme_colors;\n\t\tthis.accent_color = user.accent_color;\n\n\t\tmakeObservable(this);\n\t}\n\n\t@action\n\tupdate(member: APIUser | GatewayUserUpdateDispatchData) {\n\t\tObject.assign(this, member);\n\t}\n\n\t/**\n\t * Gets the users default avatar url\n\t * @returns The URL to the user's default avatar.\n\t */\n\tget defaultAvatarUrl(): string {\n\t\treturn REST.makeCDNUrl(\n\t\t\tCDNRoutes.defaultUserAvatar((Number(this.discriminator) % 5) as DefaultUserAvatarAssets),\n\t\t);\n\t}\n\n\t/**\n\t * Gets the users display avatar url\n\t * @returns The URL to the user's avatar or the default avatar if they don't have one.\n\t */\n\tget avatarUrl(): string {\n\t\tif (this.avatar) return REST.makeCDNUrl(CDNRoutes.userAvatar(this.id, this.avatar, ImageFormat.PNG));\n\t\telse return this.defaultAvatarUrl;\n\t}\n}\n"],"names":["User","user","__publicField","makeObservable","member","REST","CDNRoutes","ImageFormat","__decorateClass","observable","action"],"mappings":"0dAMA,MAAqBA,CAAK,CAezB,YAAYC,EAA4B,CAdxCC,EAAA,WACYA,EAAA,iBACAA,EAAA,sBACAA,EAAA,eACAA,EAAA,WAAM,IACNA,EAAA,oBAAe,GACfA,EAAA,WAAM,IACNA,EAAA,qBAA+B,MAC/BA,EAAA,oBAAe,GACfA,EAAA,qBACAA,EAAA,iBACAA,EAAA,qBACAA,EAAA,YAGX,KAAK,IAAMD,EAEX,KAAK,GAAKA,EAAK,GACf,KAAK,SAAWA,EAAK,SACrB,KAAK,cAAgBA,EAAK,cAC1B,KAAK,OAASA,EAAK,OACfA,EAAK,MACR,KAAK,IAAMA,EAAK,KAEbA,EAAK,eACR,KAAK,aAAeA,EAAK,cAEtBA,EAAK,MACR,KAAK,IAAMA,EAAK,KAEbA,EAAK,gBACR,KAAK,cAAgBA,EAAK,eAEvBA,EAAK,eACR,KAAK,aAAeA,EAAK,cAE1B,KAAK,SAAWA,EAAK,SACrB,KAAK,aAAeA,EAAK,aACzB,KAAK,aAAeA,EAAK,aAEzBE,EAAe,IAAI,CAAA,CAIpB,OAAOC,EAAiD,CAChD,OAAA,OAAO,KAAMA,CAAM,CAAA,CAO3B,IAAI,kBAA2B,CAC9B,OAAOC,EAAK,WACXC,EAAU,kBAAmB,OAAO,KAAK,aAAa,EAAI,CAA6B,CACxF,CAAA,CAOD,IAAI,WAAoB,CACvB,OAAI,KAAK,OAAeD,EAAK,WAAWC,EAAU,WAAW,KAAK,GAAI,KAAK,OAAQC,EAAY,GAAG,CAAC,EACvF,KAAK,gBAAA,CAEnB,CAjEaC,EAAA,CAAXC,CAAA,EAFmBT,EAER,UAAA,WAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EAHmBT,EAGR,UAAA,gBAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EAJmBT,EAIR,UAAA,SAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EALmBT,EAKR,UAAA,MAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EANmBT,EAMR,UAAA,eAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EAPmBT,EAOR,UAAA,MAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EARmBT,EAQR,UAAA,gBAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EATmBT,EASR,UAAA,eAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EAVmBT,EAUR,UAAA,eAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EAXmBT,EAWR,UAAA,WAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EAZmBT,EAYR,UAAA,eAAA,CAAA,EACAQ,EAAA,CAAXC,CAAA,EAbmBT,EAaR,UAAA,MAAA,CAAA,EAgCZQ,EAAA,CADCE,CAAA,EA5CmBV,EA6CpB,UAAA,SAAA,CAAA"}