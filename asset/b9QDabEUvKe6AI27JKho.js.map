{"version":3,"file":"b9QDabEUvKe6AI27JKho.js","sources":["../../src/utils/Snowflake.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/ban-ts-comment */\n// @ts-nocheck\n\n// https://github.com/discordjs/discord.js/blob/master/src/util/Snowflake.js\n// Apache License Version 2.0 Copyright 2015 - 2021 Amish Shah\n// @fc-license-skip\n\n// Discord epoch (2015-01-01T00:00:00.000Z)\n\n/**\n * A container for useful snowflake-related methods.\n */\nexport default class Snowflake {\n\tstatic readonly EPOCH = 1420070400000;\n\tstatic INCREMENT = BigInt(0); // max 4095\n\tstatic processId = BigInt(0 % 31); // max 31\n\tstatic workerId = BigInt(0 % 31); // max 31\n\n\tconstructor() {\n\t\tthrow new Error(`The ${this.constructor.name} class may not be instantiated.`);\n\t}\n\n\t/**\n\t * A Twitter-like snowflake, except the epoch is 2015-01-01T00:00:00.000Z\n\t * ```\n\t * If we have a snowflake '266241948824764416' we can represent it as binary:\n\t *\n\t * 64                                          22     17     12          0\n\t *  000000111011000111100001101001000101000000  00001  00000  000000000000\n\t *       number of ms since Discord epoch       worker  pid    increment\n\t * ```\n\t * @typedef {string} Snowflake\n\t */\n\n\t/**\n\t * Transforms a snowflake from a decimal string to a bit string.\n\t * @param  {Snowflake} num Snowflake to be transformed\n\t * @returns {string}\n\t * @private\n\t */\n\tstatic idToBinary(num) {\n\t\tlet bin = \"\";\n\t\tlet high = parseInt(num.slice(0, -10)) || 0;\n\t\tlet low = parseInt(num.slice(-10));\n\t\twhile (low > 0 || high > 0) {\n\t\t\tbin = String(low & 1) + bin;\n\t\t\tlow = Math.floor(low / 2);\n\t\t\tif (high > 0) {\n\t\t\t\tlow += 5000000000 * (high % 2);\n\t\t\t\thigh = Math.floor(high / 2);\n\t\t\t}\n\t\t}\n\t\treturn bin;\n\t}\n\n\t/**\n\t * Transforms a snowflake from a bit string to a decimal string.\n\t * @param  {string} num Bit string to be transformed\n\t * @returns {Snowflake}\n\t * @private\n\t */\n\tstatic binaryToID(num) {\n\t\tlet dec = \"\";\n\n\t\twhile (num.length > 50) {\n\t\t\tconst high = parseInt(num.slice(0, -32), 2);\n\t\t\tconst low = parseInt((high % 10).toString(2) + num.slice(-32), 2);\n\n\t\t\tdec = (low % 10).toString() + dec;\n\t\t\tnum =\n\t\t\t\tMath.floor(high / 10).toString(2) +\n\t\t\t\tMath.floor(low / 10)\n\t\t\t\t\t.toString(2)\n\t\t\t\t\t.padStart(32, \"0\");\n\t\t}\n\n\t\tnum = parseInt(num, 2);\n\t\twhile (num > 0) {\n\t\t\tdec = (num % 10).toString() + dec;\n\t\t\tnum = Math.floor(num / 10);\n\t\t}\n\n\t\treturn dec;\n\t}\n\n\tstatic generateWorkerProcess() {\n\t\t// worker process - returns a number\n\t\tconst time = BigInt(Date.now() - Snowflake.EPOCH) << BigInt(22);\n\t\tconst worker = Snowflake.workerId << 17n;\n\t\tconst process = Snowflake.processId << 12n;\n\t\tconst increment = Snowflake.INCREMENT++;\n\t\treturn BigInt(time | worker | process | increment);\n\t}\n\n\tstatic generate() {\n\t\treturn Snowflake.generateWorkerProcess().toString();\n\t}\n\t/**\n\t * A deconstructed snowflake.\n\t * @typedef {Object} DeconstructedSnowflake\n\t * @property {number} timestamp Timestamp the snowflake was created\n\t * @property {Date} date Date the snowflake was created\n\t * @property {number} workerID Worker ID in the snowflake\n\t * @property {number} processID Process ID in the snowflake\n\t * @property {number} increment Increment in the snowflake\n\t * @property {string} binary Binary representation of the snowflake\n\t */\n\n\t/**\n\t * Deconstructs a Discord snowflake.\n\t * @param {Snowflake} snowflake Snowflake to deconstruct\n\t * @returns {DeconstructedSnowflake} Deconstructed snowflake\n\t */\n\tstatic deconstruct(snowflake) {\n\t\tconst BINARY = Snowflake.idToBinary(snowflake).toString(2).padStart(64, \"0\");\n\t\tconst res = {\n\t\t\ttimestamp: parseInt(BINARY.substring(0, 42), 2) + Snowflake.EPOCH,\n\t\t\tworkerID: parseInt(BINARY.substring(42, 47), 2),\n\t\t\tprocessID: parseInt(BINARY.substring(47, 52), 2),\n\t\t\tincrement: parseInt(BINARY.substring(52, 64), 2),\n\t\t\tbinary: BINARY,\n\t\t};\n\t\tObject.defineProperty(res, \"date\", {\n\t\t\tget: function get() {\n\t\t\t\treturn new Date(this.timestamp);\n\t\t\t},\n\t\t\tenumerable: true,\n\t\t});\n\t\treturn res;\n\t}\n}\n"],"names":["_Snowflake","num","bin","high","low","dec","time","worker","process","increment","snowflake","BINARY","res","__publicField","Snowflake"],"mappings":"oKAYA,MAAqBA,EAArB,MAAqBA,CAAU,CAM9B,aAAc,CACb,MAAM,IAAI,MAAM,OAAO,KAAK,YAAY,IAAI,iCAAiC,CAAA,CAqB9E,OAAO,WAAWC,EAAK,CACtB,IAAIC,EAAM,GACNC,EAAO,SAASF,EAAI,MAAM,EAAG,GAAG,CAAC,GAAK,EACtCG,EAAM,SAASH,EAAI,MAAM,GAAG,CAAC,EAC1B,KAAAG,EAAM,GAAKD,EAAO,GAClBD,EAAA,OAAOE,EAAM,CAAC,EAAIF,EAClBE,EAAA,KAAK,MAAMA,EAAM,CAAC,EACpBD,EAAO,IACVC,GAAO,KAAcD,EAAO,GACrBA,EAAA,KAAK,MAAMA,EAAO,CAAC,GAGrB,OAAAD,CAAA,CASR,OAAO,WAAWD,EAAK,CACtB,IAAII,EAAM,GAEH,KAAAJ,EAAI,OAAS,IAAI,CACvB,MAAME,EAAO,SAASF,EAAI,MAAM,EAAG,GAAG,EAAG,CAAC,EACpCG,EAAM,UAAUD,EAAO,IAAI,SAAS,CAAC,EAAIF,EAAI,MAAM,GAAG,EAAG,CAAC,EAEzDI,GAAAD,EAAM,IAAI,SAAa,EAAAC,EAC9BJ,EACC,KAAK,MAAME,EAAO,EAAE,EAAE,SAAS,CAAC,EAChC,KAAK,MAAMC,EAAM,EAAE,EACjB,SAAS,CAAC,EACV,SAAS,GAAI,GAAG,CAAA,CAIpB,IADMH,EAAA,SAASA,EAAK,CAAC,EACdA,EAAM,GACLI,GAAAJ,EAAM,IAAI,SAAa,EAAAI,EACxBJ,EAAA,KAAK,MAAMA,EAAM,EAAE,EAGnB,OAAAI,CAAA,CAGR,OAAO,uBAAwB,CAExB,MAAAC,EAAO,OAAO,KAAK,IAAA,EAAQN,EAAU,KAAK,GAAK,OAAO,EAAE,EACxDO,EAASP,EAAU,UAAY,IAC/BQ,EAAUR,EAAU,WAAa,IACjCS,EAAYT,EAAU,YAC5B,OAAO,OAAOM,EAAOC,EAASC,EAAUC,CAAS,CAAA,CAGlD,OAAO,UAAW,CACV,OAAAT,EAAU,sBAAsB,EAAE,SAAS,CAAA,CAkBnD,OAAO,YAAYU,EAAW,CACvB,MAAAC,EAASX,EAAU,WAAWU,CAAS,EAAE,SAAS,CAAC,EAAE,SAAS,GAAI,GAAG,EACrEE,EAAM,CACX,UAAW,SAASD,EAAO,UAAU,EAAG,EAAE,EAAG,CAAC,EAAIX,EAAU,MAC5D,SAAU,SAASW,EAAO,UAAU,GAAI,EAAE,EAAG,CAAC,EAC9C,UAAW,SAASA,EAAO,UAAU,GAAI,EAAE,EAAG,CAAC,EAC/C,UAAW,SAASA,EAAO,UAAU,GAAI,EAAE,EAAG,CAAC,EAC/C,OAAQA,CACT,EACO,cAAA,eAAeC,EAAK,OAAQ,CAClC,IAAK,UAAe,CACZ,OAAA,IAAI,KAAK,KAAK,SAAS,CAC/B,EACA,WAAY,EAAA,CACZ,EACMA,CAAA,CAET,EArHCC,EADoBb,EACJ,QAAQ,YACxBa,EAFoBb,EAEb,YAAY,OAAO,CAAC,GAC3Ba,EAHoBb,EAGb,YAAY,OAAO,EAAI,EAAE,GAChCa,EAJoBb,EAIb,WAAW,OAAO,EAAI,EAAE,GAJhC,IAAqBc,EAArBd"}