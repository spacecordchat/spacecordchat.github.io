{"version":3,"file":"DluFOiLdVma08r7P6IFj.js","sources":["../../src/stores/GuildMemberListStore.ts"],"sourcesContent":["import type { GatewayGuildMemberListUpdateDispatchData } from \"@spacebarchat/spacebar-api-types/v9\";\nimport {\n\tGatewayGuildMemberListUpdateGroup,\n\tGatewayGuildMemberListUpdateOperation,\n} from \"@spacebarchat/spacebar-api-types/v9\";\nimport { action, observable } from \"mobx\";\nimport Logger from \"../utils/Logger\";\nimport AppStore from \"./AppStore\";\nimport Guild from \"./objects/Guild\";\nimport GuildMember from \"./objects/GuildMember\";\n\nexport default class GuildMemberListStore {\n\tprivate readonly logger: Logger = new Logger(\"GuildMemberListStore\");\n\tprivate readonly app: AppStore;\n\n\tid: string;\n\tprivate readonly guild: Guild;\n\t@observable groups: GatewayGuildMemberListUpdateGroup[] = [];\n\t@observable member_count: number;\n\t@observable online_count: number;\n\t@observable list: { name: string; items: GuildMember[] }[] = [];\n\n\tconstructor(app: AppStore, guild: Guild, data: GatewayGuildMemberListUpdateDispatchData) {\n\t\tthis.app = app;\n\t\tthis.guild = guild;\n\n\t\tconst { groups, id, member_count, online_count, ops } = data;\n\n\t\tthis.id = id;\n\t\tthis.groups = groups;\n\t\tthis.member_count = member_count;\n\t\tthis.online_count = online_count;\n\t\tthis.computeListData(data.ops);\n\t}\n\n\t@action\n\tupdate(data: GatewayGuildMemberListUpdateDispatchData) {\n\t\tconst { groups, id, member_count, online_count, ops } = data;\n\n\t\tthis.id = id;\n\t\tthis.groups = groups;\n\t\tthis.member_count = member_count;\n\t\tthis.online_count = online_count;\n\t\tthis.computeListData(data.ops);\n\t}\n\n\tprivate computeListData(ops: GatewayGuildMemberListUpdateDispatchData[\"ops\"]) {\n\t\tfor (const i of ops) {\n\t\t\tconst { op, items, range, item, index } = i;\n\t\t\tswitch (op) {\n\t\t\t\tcase GatewayGuildMemberListUpdateOperation.SYNC: {\n\t\t\t\t\tlet listData: {\n\t\t\t\t\t\ttitle: string;\n\t\t\t\t\t\tdata: { member: GuildMember; index: number }[];\n\t\t\t\t\t}[] = [];\n\n\t\t\t\t\tfor (const item of items) {\n\t\t\t\t\t\tif (\"group\" in item) {\n\t\t\t\t\t\t\tconst role = this.app.roles.get(item.group.id);\n\n\t\t\t\t\t\t\tlistData.push({\n\t\t\t\t\t\t\t\ttitle: `${(role?.name ?? item.group.id).toUpperCase()}`,\n\t\t\t\t\t\t\t\tdata: [],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// handle presence\n\t\t\t\t\t\t\tthis.app.presences.add({\n\t\t\t\t\t\t\t\t...item.member.presence,\n\t\t\t\t\t\t\t\tguild_id: this.guild.id,\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tconst member = this.guild.members.get(item.member.id);\n\t\t\t\t\t\t\tif (member) {\n\t\t\t\t\t\t\t\tlistData[listData.length - 1].data.push({\n\t\t\t\t\t\t\t\t\tmember,\n\t\t\t\t\t\t\t\t\tindex: item.member.index,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst member = this.guild.members.add(item.member);\n\t\t\t\t\t\t\t\tlistData[listData.length - 1].data.push({\n\t\t\t\t\t\t\t\t\tmember: member!,\n\t\t\t\t\t\t\t\t\tindex: item.member.index,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// remove empty groups\n\t\t\t\t\tlistData = listData.filter((i) => i.data.length > 0);\n\t\t\t\t\t// add the number of members in each group to the group name\n\t\t\t\t\tlistData = listData.map((i) => ({\n\t\t\t\t\t\t...i,\n\t\t\t\t\t\ttitle: `${i.title} - ${i.data.length}`,\n\t\t\t\t\t}));\n\n\t\t\t\t\t// hide offline group if it has more than 100 members\n\t\t\t\t\tlistData = listData.filter(\n\t\t\t\t\t\t(i) => !(i.title.toLowerCase().startsWith(\"offline\") && i.data.length >= 100),\n\t\t\t\t\t);\n\n\t\t\t\t\t// sort the list by the index\n\t\t\t\t\t// this.list = listData.flatMap(i => [\n\t\t\t\t\t//   i.title,\n\t\t\t\t\t//   ...i.data.sort((a, b) => a.index - b.index).map(i => i.member),\n\t\t\t\t\t// ]);\n\n\t\t\t\t\t// this.list = listData.flatMap((i) => [\n\t\t\t\t\t// \ti.title,\n\t\t\t\t\t// \t...i.data\n\t\t\t\t\t// \t\t.sort((a, b) => {\n\t\t\t\t\t// \t\t\tconst ua = a.member.user?.username;\n\t\t\t\t\t// \t\t\tconst ub = b.member.user?.username;\n\t\t\t\t\t// \t\t\tif (ua && ub) {\n\t\t\t\t\t// \t\t\t\treturn ua.toLowerCase() > ub.toLowerCase() ? 1 : -1;\n\t\t\t\t\t// \t\t\t}\n\n\t\t\t\t\t// \t\t\treturn 0;\n\t\t\t\t\t// \t\t})\n\t\t\t\t\t// \t\t.map((i) => i.member),\n\t\t\t\t\t// ]);\n\n\t\t\t\t\tthis.list = listData.map((i) => ({\n\t\t\t\t\t\tname: i.title,\n\t\t\t\t\t\titems: i.data\n\t\t\t\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t\t\t\tconst ua = a.member.user?.username;\n\t\t\t\t\t\t\t\tconst ub = b.member.user?.username;\n\t\t\t\t\t\t\t\tif (ua && ub) {\n\t\t\t\t\t\t\t\t\treturn ua.toLowerCase() > ub.toLowerCase() ? 1 : -1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.map((i) => i.member),\n\t\t\t\t\t}));\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase GatewayGuildMemberListUpdateOperation.DELETE: {\n\t\t\t\t\tthis.logger.warn(\"Unimplemented OP DELETE\", item);\n\t\t\t\t\t//   for (const item of items) {\n\t\t\t\t\t//     if (\"group\" in item) {\n\t\t\t\t\t//       this.logger.debug(\n\t\t\t\t\t//         `Delete group ${item.group.id} from ${this.id}`,\n\t\t\t\t\t//         i\n\t\t\t\t\t//       );\n\t\t\t\t\t//       //   this.listData.splice(range[0], 1);\n\t\t\t\t\t//     } else {\n\t\t\t\t\t//       //   this.listData[range[0]].data.splice(range[1], 1);\n\t\t\t\t\t//       this.logger.debug(\n\t\t\t\t\t//         `Delete member ${item.member.user.username} from ${this.id}`,\n\t\t\t\t\t//         i\n\t\t\t\t\t//       );\n\t\t\t\t\t//     }\n\t\t\t\t\t//   }\n\t\t\t\t\tthis.logger.debug(\"DELETE\", item);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase GatewayGuildMemberListUpdateOperation.UPDATE: {\n\t\t\t\t\tthis.logger.warn(\"Unimplemented OP UPDATE\", item);\n\t\t\t\t\t//   for (const item of items) {\n\t\t\t\t\t//     if (\"group\" in item) {\n\t\t\t\t\t//       //   this.listData[range[0]].title = item.group.id;\n\t\t\t\t\t//       this.logger.debug(\n\t\t\t\t\t//         `Update group ${item.group.id} from ${this.id}`,\n\t\t\t\t\t//         i\n\t\t\t\t\t//       );\n\t\t\t\t\t//     } else {\n\t\t\t\t\t//       //   this.listData[range[0]].data[range[1]] = item.member;\n\t\t\t\t\t//       this.logger.debug(\n\t\t\t\t\t//         `Update member ${item.member.user.username} from ${this.id}`,\n\t\t\t\t\t//         i\n\t\t\t\t\t//       );\n\t\t\t\t\t//     }\n\t\t\t\t\t//   }\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase GatewayGuildMemberListUpdateOperation.INSERT: {\n\t\t\t\t\tthis.logger.warn(\"Unimplemented OP INSERT\", item);\n\t\t\t\t\t// if ('group' in item) {\n\t\t\t\t\t//   this.list.splice(index, 0, item.group.id);\n\t\t\t\t\t// } else {\n\t\t\t\t\t//   // try to get the existing member\n\t\t\t\t\t//   if (item.member.user?.id) {\n\t\t\t\t\t//     const member = this.guild.members.get(item.member.user.id);\n\t\t\t\t\t//     if (member) {\n\t\t\t\t\t//       this.list[index].data.push(member);\n\t\t\t\t\t//       return;\n\t\t\t\t\t//     }\n\t\t\t\t\t//   }\n\n\t\t\t\t\t//   this.list[index].data.splice(\n\t\t\t\t\t//     index,\n\t\t\t\t\t//     0,\n\t\t\t\t\t//     new GuildMember(this.domain, this.guild, item.member),\n\t\t\t\t\t//   );\n\t\t\t\t\t// }\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tthis.logger.warn(`Uknown OP: ${op}`);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"],"names":["GuildMemberListStore","app","guild","data","__publicField","Logger","groups","id","member_count","online_count","ops","i","op","items","range","item","index","GatewayGuildMemberListUpdateOperation","listData","role","member","b","ua","_a","ub","_b","__decorateClass","observable","action"],"mappings":"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"}