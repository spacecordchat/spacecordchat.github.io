{"version":3,"file":"BTSP5QPw8TjkzNIXZ5QR.js","sources":["../../src/stores/objects/Channel.ts"],"sourcesContent":["import * as Icons from \"@mdi/js\";\nimport type {\n\tAPIChannel,\n\tAPIInvite,\n\tAPIOverwrite,\n\tAPIUser,\n\tAPIWebhook,\n\tGatewayVoiceState,\n\tRESTGetAPIChannelMessagesQuery,\n\tRESTGetAPIChannelMessagesResult,\n\tRESTPostAPIChannelMessageJSONBody,\n\tRESTPostAPIChannelMessageResult,\n\tSnowflake as SnowflakeType,\n} from \"@spacebarchat/spacebar-api-types/v9\";\nimport { ChannelType, Routes } from \"@spacebarchat/spacebar-api-types/v9\";\nimport { ObservableMap, action, computed, makeObservable, observable } from \"mobx\";\nimport murmur from \"murmurhash-js/murmurhash3_gc\";\nimport Logger from \"../../utils/Logger\";\nimport type { PermissionResolvable } from \"../../utils/Permissions\";\nimport { Permissions } from \"../../utils/Permissions\";\nimport { APIError } from \"../../utils/interfaces/api\";\nimport AppStore from \"../AppStore\";\nimport MessageStore from \"../MessageStore\";\nimport QueuedMessage from \"./QueuedMessage\";\nimport User from \"./User\";\n\nexport default class Channel {\n\tprivate readonly logger: Logger = new Logger(\"Channel\");\n\tprivate readonly app: AppStore;\n\n\tid: SnowflakeType;\n\tcreatedAt: Date;\n\t@observable name?: string;\n\t@observable icon?: string | null;\n\ttype: number;\n\t@observable recipients?: APIUser[];\n\t@observable lastMessageId?: SnowflakeType;\n\tguildId?: SnowflakeType;\n\t@observable parentId: SnowflakeType;\n\townerId?: SnowflakeType;\n\t@observable lastPinTimestamp?: number;\n\t@observable defaultAutoArchiveDuration?: number;\n\t@observable position?: number;\n\t@observable permissionOverwrites: APIOverwrite[];\n\t@observable videoQualityMode?: number;\n\t@observable bitrate?: number;\n\t@observable userLimit?: number;\n\t@observable nsfw: boolean;\n\t@observable rateLimitPerUser?: number;\n\t@observable topic?: string;\n\t@observable invites?: APIInvite[];\n\t@observable retentionPolicyId?: string;\n\t@observable messages: MessageStore;\n\t@observable voiceStates?: GatewayVoiceState[];\n\t// @observable readStates?: APIReadState[]; ????? this seems wrong\n\t@observable webhooks?: APIWebhook[];\n\t@observable flags: number;\n\t@observable defaultThreadRateLimitPerUser: number;\n\t@observable channelIcon?: keyof typeof Icons;\n\t@observable typingIds: ObservableMap<SnowflakeType, (...args: unknown[]) => void>;\n\t@observable typing: number | null = null;\n\tprivate hasFetchedInitialMessages = false;\n\n\tconstructor(app: AppStore, channel: APIChannel) {\n\t\tthis.app = app;\n\t\tthis.typingIds = new ObservableMap();\n\n\t\tthis.id = channel.id;\n\t\tthis.createdAt = new Date(channel.created_at);\n\t\tthis.name = channel.name;\n\t\tthis.icon = channel.icon;\n\t\tthis.type = channel.type;\n\t\tthis.recipients = channel.recipients;\n\t\tthis.lastMessageId = channel.last_message_id;\n\t\tthis.guildId = channel.guild_id;\n\t\tthis.parentId = channel.parent_id;\n\t\tthis.ownerId = channel.owner_id;\n\t\tthis.lastPinTimestamp = channel.last_pin_timestamp;\n\t\tthis.defaultAutoArchiveDuration = channel.default_auto_archive_duration;\n\t\tthis.position = channel.position;\n\t\tthis.permissionOverwrites = channel.permission_overwrites ?? [];\n\t\tthis.videoQualityMode = channel.video_quality_mode;\n\t\tthis.bitrate = channel.bitrate;\n\t\tthis.userLimit = channel.user_limit;\n\t\tthis.nsfw = channel.nsfw;\n\t\tthis.rateLimitPerUser = channel.rate_limit_per_user;\n\t\tthis.topic = channel.topic;\n\t\tthis.invites = channel.invites;\n\t\tthis.retentionPolicyId = channel.retention_policy_id;\n\t\tthis.voiceStates = channel.voice_states;\n\t\t// this.readStates = channel.read_states;\n\t\tthis.webhooks = channel.webhooks;\n\t\tthis.flags = channel.flags;\n\t\tthis.defaultThreadRateLimitPerUser = channel.default_thread_rate_limit_per_user;\n\n\t\tthis.messages = new MessageStore(app, this.id);\n\n\t\tif (channel.messages) {\n\t\t\tthis.messages.addAll(channel.messages);\n\t\t}\n\n\t\tswitch (this.type) {\n\t\t\tcase ChannelType.GuildText:\n\t\t\t\tthis.channelIcon = \"mdiPound\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.GuildVoice:\n\t\t\t\tthis.channelIcon = \"mdiVolumeHigh\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.GuildAnnouncement:\n\t\t\tcase ChannelType.AnnouncementThread:\n\t\t\t\tthis.channelIcon = \"mdiBullhornVariant\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.GuildStore:\n\t\t\tcase ChannelType.Transactional:\n\t\t\t\tthis.channelIcon = \"mdiStore\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.Encrypted:\n\t\t\tcase ChannelType.EncryptedThread:\n\t\t\t\tthis.channelIcon = \"mdiLock\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.PublicThread:\n\t\t\tcase ChannelType.PrivateThread:\n\t\t\t\tthis.channelIcon = \"mdiCommentMultipleOutline\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.GuildStageVoice:\n\t\t\t\tthis.channelIcon = \"mdiBroadcast\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.GuildForum:\n\t\t\t\tthis.channelIcon = \"mdiForumOutline\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.TicketTracker:\n\t\t\t\tthis.channelIcon = \"mdiTicketOutline\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.KanBan:\n\t\t\t\tthis.channelIcon = \"mdiDeveloperBoard\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.VoicelessWhiteboard:\n\t\t\t\tthis.channelIcon = \"mdiDraw\";\n\t\t\t\tbreak;\n\t\t\tcase ChannelType.GuildDirectory:\n\t\t\t\tthis.channelIcon = \"mdiFolder\";\n\t\t\t\tbreak;\n\t\t}\n\n\t\tmakeObservable(this);\n\t}\n\n\t@action\n\tupdate(data: APIChannel) {\n\t\tObject.assign(this, data);\n\t}\n\n\t@action\n\tgetMessages(\n\t\tapp: AppStore,\n\t\tisInitial: boolean,\n\t\tlimit?: number,\n\t\tbefore?: SnowflakeType,\n\t\tafter?: SnowflakeType,\n\t\taround?: SnowflakeType,\n\t): Promise<number> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (isInitial && this.hasFetchedInitialMessages) return;\n\n\t\t\tlet opts: RESTGetAPIChannelMessagesQuery = {\n\t\t\t\tlimit: limit || 50,\n\t\t\t};\n\n\t\t\tif (before) {\n\t\t\t\topts = { ...opts, before };\n\t\t\t}\n\t\t\tif (after) {\n\t\t\t\topts = { ...opts, after };\n\t\t\t}\n\t\t\tif (around) {\n\t\t\t\topts = { ...opts, around };\n\t\t\t}\n\n\t\t\tif (isInitial) this.logger.info(`Fetching initial messages for ${this.id}`);\n\t\t\telse this.logger.info(`Fetching messages for ${this.id} before ${before}`);\n\t\t\tapp.rest\n\t\t\t\t.get<RESTGetAPIChannelMessagesResult | APIError>(Routes.channelMessages(this.id), opts)\n\t\t\t\t.then((res) => {\n\t\t\t\t\tif (\"code\" in res) {\n\t\t\t\t\t\tthis.logger.error(res);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tthis.messages.addAll(\n\t\t\t\t\t\tres.filter((x) => !this.messages.has(x.id)),\n\t\t\t\t\t\t// .sort((a, b) => {\n\t\t\t\t\t\t//   const aTimestamp = new Date(a.timestamp as unknown as string);\n\t\t\t\t\t\t//   const bTimestamp = new Date(b.timestamp as unknown as string);\n\t\t\t\t\t\t//   return aTimestamp.getTime() - bTimestamp.getTime();\n\t\t\t\t\t\t// })\n\t\t\t\t\t);\n\t\t\t\t\tthis.hasFetchedInitialMessages = true;\n\t\t\t\t\tresolve(res.length);\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tthis.logger.error(err);\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t});\n\t}\n\n\t@action\n\tasync sendMessage(data: RESTPostAPIChannelMessageJSONBody | FormData, msg?: QueuedMessage) {\n\t\tif (data instanceof FormData)\n\t\t\treturn this.app.rest.postFormData<RESTPostAPIChannelMessageResult>(\n\t\t\t\tRoutes.channelMessages(this.id),\n\t\t\t\tdata,\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\tmsg,\n\t\t\t);\n\t\treturn this.app.rest.post<RESTPostAPIChannelMessageJSONBody, RESTPostAPIChannelMessageResult>(\n\t\t\tRoutes.channelMessages(this.id),\n\t\t\tdata,\n\t\t);\n\t}\n\n\t@computed\n\tget isTextChannel() {\n\t\treturn (\n\t\t\tthis.type === ChannelType.GuildText ||\n\t\t\tthis.type === ChannelType.GuildVoice ||\n\t\t\tthis.type === ChannelType.GuildStageVoice ||\n\t\t\tthis.type === ChannelType.GuildForum ||\n\t\t\tthis.type === ChannelType.GuildAnnouncement ||\n\t\t\tthis.type === ChannelType.AnnouncementThread ||\n\t\t\tthis.type === ChannelType.Encrypted ||\n\t\t\tthis.type === ChannelType.EncryptedThread ||\n\t\t\tthis.type === ChannelType.PrivateThread ||\n\t\t\tthis.type === ChannelType.PublicThread ||\n\t\t\tthis.type === ChannelType.GroupDM ||\n\t\t\tthis.type === ChannelType.DM\n\t\t);\n\t}\n\n\t@computed\n\tget isGuildTextChannel() {\n\t\treturn (\n\t\t\tthis.type === ChannelType.GuildText ||\n\t\t\tthis.type === ChannelType.GuildVoice ||\n\t\t\tthis.type === ChannelType.GuildStageVoice ||\n\t\t\tthis.type === ChannelType.GuildForum ||\n\t\t\tthis.type === ChannelType.GuildAnnouncement ||\n\t\t\tthis.type === ChannelType.AnnouncementThread ||\n\t\t\tthis.type === ChannelType.Encrypted ||\n\t\t\tthis.type === ChannelType.EncryptedThread ||\n\t\t\tthis.type === ChannelType.PrivateThread ||\n\t\t\tthis.type === ChannelType.PublicThread\n\t\t);\n\t}\n\n\t@computed\n\tget typingUsers(): User[] {\n\t\treturn Array.from(this.typingIds.keys())\n\t\t\t.map((x) => this.app.users.get(x) as User)\n\t\t\t.filter((x) => x && x.id !== this.app.account!.id);\n\t}\n\n\thasPermission(permission: PermissionResolvable) {\n\t\tconst permissions = Permissions.getPermission(\n\t\t\tthis.app.account!.id,\n\t\t\tthis.guildId ? this.app.guilds.get(this.guildId) : undefined,\n\t\t\tthis,\n\t\t);\n\t\treturn permissions.has(permission);\n\t}\n\n\t@action\n\tasync startTyping() {\n\t\tif (this.typing && this.typing > Date.now()) return;\n\n\t\tthis.logger.debug(\"Client user has started typing\");\n\t\tthis.typing = Date.now() + 10_000;\n\t\tawait this.app.rest.post(Routes.channelTyping(this.id));\n\t}\n\n\t@action\n\tstopTyping(force?: boolean) {\n\t\tif (force || this.typing) {\n\t\t\tthis.logger.debug(\"Client user has stopped typing\");\n\t\t\tthis.typing = null;\n\t\t}\n\t}\n\n\t@computed\n\tget guild() {\n\t\tif (!this.guildId) return undefined;\n\t\treturn this.app.guilds.get(this.guildId);\n\t}\n\n\t@computed\n\tget listId() {\n\t\tlet listId = \"everyone\";\n\t\tconst perms: string[] = [];\n\n\t\tfor (const overwrite of this.permissionOverwrites) {\n\t\t\tconst { id, allow, deny } = overwrite;\n\n\t\t\tif (allow.toBigInt() & Permissions.FLAGS.VIEW_CHANNEL) perms.push(`allow:${id}`);\n\t\t\telse if (deny.toBigInt() & Permissions.FLAGS.VIEW_CHANNEL) perms.push(`deny:${id}`);\n\t\t}\n\n\t\tif (perms.length) {\n\t\t\tlistId = murmur(perms.sort().join(\",\")).toString();\n\t\t}\n\n\t\treturn listId;\n\t}\n\n\t@computed\n\tget unread() {\n\t\tconst readState = this.app.readStateStore.get(this.id);\n\t\tif (!readState) {\n\t\t\t// this.logger.warn(`Failed to find readstate for channel ${this.id}`); // this just causes unnecessary spam\n\t\t\treturn false;\n\t\t}\n\n\t\treturn readState.lastMessageId !== this.lastMessageId;\n\t}\n\n\tmarkAsRead() {\n\t\tconst readState = this.app.readStateStore.get(this.id);\n\t\tif (!readState) {\n\t\t\tthis.logger.warn(`Failed to find readstate for channel ${this.id}`); // this just causes unnecessary spam\n\t\t\treturn;\n\t\t}\n\n\t\tthis.app.rest\n\t\t\t.post(Routes.channelMessage(this.id, readState.lastMessageId) + \"/ack\", {\n\t\t\t\tmention_count: readState.mentionCount,\n\t\t\t})\n\t\t\t.then((r) => {\n\t\t\t\tthis.logger.debug(`Acked ${this.lastMessageId} for channel ${this.id}`, r);\n\t\t\t})\n\t\t\t.catch((e) => {\n\t\t\t\tthis.logger.error(`Failed to ack ${this.lastMessageId} for channel ${this.id}`, e);\n\t\t\t});\n\t}\n}\n"],"names":["Channel","app","channel","__publicField","Logger","ObservableMap","MessageStore","ChannelType","makeObservable","data","isInitial","limit","before","after","around","resolve","reject","opts","Routes","res","x","err","msg","permission","Permissions","force","listId","perms","overwrite","id","allow","deny","murmur","readState","r","e","__decorateClass","observable","action","computed"],"mappings":"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"}