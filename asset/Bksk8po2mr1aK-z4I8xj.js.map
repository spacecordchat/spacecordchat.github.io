{"version":3,"file":"Bksk8po2mr1aK-z4I8xj.js","sources":["../../src/stores/objects/Message.ts"],"sourcesContent":["import {\n\tRoutes,\n\ttype APIActionRowComponent,\n\ttype APIApplication,\n\ttype APIAttachment,\n\ttype APIChannel,\n\ttype APIChannelMention,\n\ttype APIEmbed,\n\ttype APIMessage,\n\ttype APIMessageActionRowComponent,\n\ttype APIMessageActivity,\n\ttype APIMessageInteraction,\n\ttype APIMessageReference,\n\ttype APIReaction,\n\ttype APIRole,\n\ttype APISticker,\n\ttype APIStickerItem,\n\ttype APIUser,\n\ttype MessageFlags,\n\ttype Snowflake,\n} from \"@spacebarchat/spacebar-api-types/v9\";\nimport { action, makeObservable, observable } from \"mobx\";\nimport AppStore from \"../AppStore\";\nimport Channel from \"./Channel\";\nimport MessageBase from \"./MessageBase\";\nimport QueuedMessage, { QueuedMessageData } from \"./QueuedMessage\";\n\nexport type MessageLike = Message | QueuedMessage;\nexport type MessageLikeData = APIMessage | QueuedMessageData;\n\nexport default class Message extends MessageBase {\n\t/**\n\t * ID of the channel the message was sent in\n\t */\n\t// channel_id: Snowflake;\n\tchannel: Channel;\n\t/**\n\t * When this message was edited (or null if never)\n\t */\n\t@observable edited_timestamp: Date | null;\n\t/**\n\t * Whether this was a TTS message\n\t */\n\ttts: boolean;\n\t/**\n\t * Whether this message mentions everyone\n\t */\n\tmention_everyone: boolean;\n\t/**\n\t * Users specifically mentioned in the message\n\t *\n\t * The `member` field is only present in `MESSAGE_CREATE` and `MESSAGE_UPDATE` events\n\t * from text-based guild channels\n\t *\n\t * See https://discord.com/developers/docs/resources/user#user-object\n\t * See https://discord.com/developers/docs/resources/guild#guild-member-object\n\t */\n\tmentions: APIUser[];\n\t/**\n\t * Roles specifically mentioned in this message\n\t *\n\t * See https://discord.com/developers/docs/topics/permissions#role-object\n\t */\n\tmention_roles: APIRole[\"id\"][];\n\t/**\n\t * Channels specifically mentioned in this message\n\t *\n\t * Not all channel mentions in a message will appear in `mention_channels`.\n\t * - Only textual channels that are visible to everyone in a lurkable guild will ever be included\n\t * - Only crossposted messages (via Channel Following) currently include `mention_channels` at all\n\t *\n\t * If no mentions in the message meet these requirements, this field will not be sent\n\t *\n\t * See https://discord.com/developers/docs/resources/channel#channel-mention-object\n\t */\n\tmention_channels?: APIChannelMention[];\n\t/**\n\t * Any attached files\n\t *\n\t * See https://discord.com/developers/docs/resources/channel#attachment-object\n\t *\n\t * The `MESSAGE_CONTENT` privileged gateway intent will become required after **August 31, 2022** for verified applications to receive a non-empty value from this field\n\t *\n\t * In the Discord Developers Portal, you need to enable the toggle of this intent of your application in **Bot > Privileged Gateway Intents**\n\t *\n\t * See https://support-dev.discord.com/hc/articles/4404772028055\n\t */\n\t@observable attachments: APIAttachment[];\n\t/**\n\t * Any embedded content\n\t *\n\t * See https://discord.com/developers/docs/resources/channel#embed-object\n\t *\n\t * The `MESSAGE_CONTENT` privileged gateway intent will become required after **August 31, 2022** for verified applications to receive a non-empty value from this field\n\t *\n\t * In the Discord Developers Portal, you need to enable the toggle of this intent of your application in **Bot > Privileged Gateway Intents**\n\t *\n\t * See https://support-dev.discord.com/hc/articles/4404772028055\n\t */\n\t@observable embeds: APIEmbed[];\n\t/**\n\t * Reactions to the message\n\t *\n\t * See https://discord.com/developers/docs/resources/channel#reaction-object\n\t */\n\t@observable reactions?: APIReaction[];\n\t/**\n\t * A nonce that can be used for optimistic message sending (up to 25 characters)\n\t *\n\t * **You will not receive this from further fetches. This is received only once from a `MESSAGE_CREATE`\n\t * event to ensure it got sent**\n\t */\n\tnonce?: string | number;\n\t/**\n\t * Whether this message is pinned\n\t */\n\t@observable pinned: boolean;\n\t/**\n\t * If the message is generated by a webhook, this is the webhook's id\n\t */\n\twebhook_id?: Snowflake;\n\t/**\n\t * Sent with Rich Presence-related chat embeds\n\t *\n\t * See https://discord.com/developers/docs/resources/channel#message-object-message-activity-structure\n\t */\n\tactivity?: APIMessageActivity;\n\t/**\n\t * Sent with Rich Presence-related chat embeds\n\t *\n\t * See https://discord.com/developers/docs/resources/application#application-object\n\t */\n\tapplication?: Partial<APIApplication>;\n\t/**\n\t * If the message is a response to an Interaction, this is the id of the interaction's application\n\t */\n\tapplication_id?: Snowflake;\n\t/**\n\t * Reference data sent with crossposted messages, replies, pins, and thread starter messages\n\t *\n\t * See https://discord.com/developers/docs/resources/channel#message-reference-object-message-reference-structure\n\t */\n\tmessage_reference?: APIMessageReference;\n\t/**\n\t * Message flags combined as a bitfield\n\t *\n\t * See https://discord.com/developers/docs/resources/channel#message-object-message-flags\n\t *\n\t * See https://en.wikipedia.org/wiki/Bit_field\n\t */\n\tflags?: MessageFlags;\n\t/**\n\t * The message associated with the `message_reference`\n\t *\n\t * This field is only returned for messages with a `type` of `19` (REPLY).\n\t *\n\t * If the message is a reply but the `referenced_message` field is not present,\n\t * the backend did not attempt to fetch the message that was being replied to,\n\t * so its state is unknown.\n\t *\n\t * If the field exists but is `null`, the referenced message was deleted\n\t *\n\t * See https://discord.com/developers/docs/resources/channel#message-object\n\t */\n\treferenced_message?: APIMessage | null;\n\t/**\n\t * Sent if the message is a response to an Interaction\n\t */\n\tinteraction?: APIMessageInteraction;\n\t/**\n\t * Sent if a thread was started from this message\n\t */\n\tthread?: APIChannel;\n\t/**\n\t * Sent if the message contains components like buttons, action rows, or other interactive components\n\t *\n\t * The `MESSAGE_CONTENT` privileged gateway intent will become required after **August 31, 2022** for verified applications to receive a non-empty value from this field\n\t *\n\t * In the Discord Developers Portal, you need to enable the toggle of this intent of your application in **Bot > Privileged Gateway Intents**\n\t *\n\t * See https://support-dev.discord.com/hc/articles/4404772028055\n\t */\n\t@observable\n\tcomponents?: APIActionRowComponent<APIMessageActionRowComponent>[];\n\t/**\n\t * Sent if the message contains stickers\n\t *\n\t * See https://discord.com/developers/docs/resources/sticker#sticker-item-object\n\t */\n\tsticker_items?: APIStickerItem[];\n\t/**\n\t * The stickers sent with the message\n\t *\n\t * See https://discord.com/developers/docs/resources/sticker#sticker-object\n\t * @deprecated Use `sticker_items` instead\n\t */\n\tstickers?: APISticker[];\n\t/**\n\t * A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread\n\t *\n\t * It can be used to estimate the relative position of the message in a thread in company with `total_message_sent` on parent thread\n\t */\n\tposition?: number;\n\tguild_id?: Snowflake;\n\n\tconstructor(app: AppStore, data: APIMessage & { guild_id?: Snowflake }) {\n\t\tsuper(app, data);\n\n\t\tthis.id = data.id;\n\t\t// this.channel_id = data.channel_id;\n\t\tthis.channel = this.app.channels.get(data.channel_id)!;\n\t\t// this.member = message.member ? new GuildMember(message.member) : undefined;\n\t\tthis.content = data.content;\n\t\tthis.timestamp = new Date(data.timestamp);\n\t\tthis.edited_timestamp = data.edited_timestamp ? new Date(data.edited_timestamp) : null;\n\t\tthis.tts = data.tts;\n\t\tthis.mention_everyone = data.mention_everyone;\n\t\tthis.mentions = data.mentions; // TODO: user object?\n\t\tthis.mention_roles = (data.mention_roles as unknown as { id: Snowflake }[]).map((x) => x.id); // FIXME: oh god, who did this in the server smh\n\t\tthis.mention_channels = data.mention_channels;\n\t\tthis.attachments = data.attachments;\n\t\tthis.embeds = data.embeds;\n\t\tthis.reactions = data.reactions;\n\t\tthis.nonce = data.nonce;\n\t\tthis.pinned = data.pinned;\n\t\tthis.webhook_id = data.webhook_id;\n\t\tthis.type = data.type;\n\t\tthis.activity = data.activity;\n\t\tthis.application = data.application;\n\t\tthis.application_id = data.application_id;\n\t\tthis.message_reference = data.message_reference;\n\t\tthis.flags = data.flags;\n\t\tthis.referenced_message = data.referenced_message;\n\t\tthis.interaction = data.interaction;\n\t\tthis.thread = data.thread;\n\t\tthis.components = data.components;\n\t\tthis.sticker_items = data.sticker_items;\n\t\tthis.stickers = data.stickers;\n\t\tthis.position = data.position;\n\t\tif (data.guild_id) {\n\t\t\tthis.guild_id = data.guild_id;\n\t\t}\n\n\t\tmakeObservable(this);\n\t}\n\n\t@action\n\tupdate(message: APIMessage) {\n\t\tObject.assign(this, message);\n\n\t\tthis.timestamp = new Date(message.timestamp);\n\t\tthis.edited_timestamp = message.edited_timestamp ? new Date(message.edited_timestamp) : null;\n\t}\n\n\tasync delete() {\n\t\tawait this.app.rest.delete(Routes.channelMessage(this.channel.id, this.id));\n\t}\n}\n"],"names":["Message","MessageBase","app","data","__publicField","x","makeObservable","message","Routes","__decorateClass","observable","action"],"mappings":"ydA8BA,MAAqBA,UAAgBC,CAAY,CA+KhD,YAAYC,EAAeC,EAA6C,CACvE,MAAMD,EAAKC,CAAI,EA3KhBC,EAAA,gBAIYA,EAAA,yBAIZA,EAAA,YAIAA,EAAA,yBAUAA,EAAA,iBAMAA,EAAA,sBAYAA,EAAA,yBAYYA,EAAA,oBAYAA,EAAA,eAMAA,EAAA,kBAOZA,EAAA,cAIYA,EAAA,eAIZA,EAAA,mBAMAA,EAAA,iBAMAA,EAAA,oBAIAA,EAAA,uBAMAA,EAAA,0BAQAA,EAAA,cAcAA,EAAA,2BAIAA,EAAA,oBAIAA,EAAA,eAWAA,EAAA,mBAMAA,EAAA,sBAOAA,EAAA,iBAMAA,EAAA,iBACAA,EAAA,iBAKC,KAAK,GAAKD,EAAK,GAEf,KAAK,QAAU,KAAK,IAAI,SAAS,IAAIA,EAAK,UAAU,EAEpD,KAAK,QAAUA,EAAK,QACpB,KAAK,UAAY,IAAI,KAAKA,EAAK,SAAS,EACxC,KAAK,iBAAmBA,EAAK,iBAAmB,IAAI,KAAKA,EAAK,gBAAgB,EAAI,KAClF,KAAK,IAAMA,EAAK,IAChB,KAAK,iBAAmBA,EAAK,iBAC7B,KAAK,SAAWA,EAAK,SACrB,KAAK,cAAiBA,EAAK,cAAiD,IAAKE,GAAMA,EAAE,EAAE,EAC3F,KAAK,iBAAmBF,EAAK,iBAC7B,KAAK,YAAcA,EAAK,YACxB,KAAK,OAASA,EAAK,OACnB,KAAK,UAAYA,EAAK,UACtB,KAAK,MAAQA,EAAK,MAClB,KAAK,OAASA,EAAK,OACnB,KAAK,WAAaA,EAAK,WACvB,KAAK,KAAOA,EAAK,KACjB,KAAK,SAAWA,EAAK,SACrB,KAAK,YAAcA,EAAK,YACxB,KAAK,eAAiBA,EAAK,eAC3B,KAAK,kBAAoBA,EAAK,kBAC9B,KAAK,MAAQA,EAAK,MAClB,KAAK,mBAAqBA,EAAK,mBAC/B,KAAK,YAAcA,EAAK,YACxB,KAAK,OAASA,EAAK,OACnB,KAAK,WAAaA,EAAK,WACvB,KAAK,cAAgBA,EAAK,cAC1B,KAAK,SAAWA,EAAK,SACrB,KAAK,SAAWA,EAAK,SACjBA,EAAK,WACR,KAAK,SAAWA,EAAK,UAGtBG,EAAe,IAAI,CAAA,CAIpB,OAAOC,EAAqB,CACpB,OAAA,OAAO,KAAMA,CAAO,EAE3B,KAAK,UAAY,IAAI,KAAKA,EAAQ,SAAS,EAC3C,KAAK,iBAAmBA,EAAQ,iBAAmB,IAAI,KAAKA,EAAQ,gBAAgB,EAAI,IAAA,CAGzF,MAAM,QAAS,CACR,MAAA,KAAK,IAAI,KAAK,OAAOC,EAAO,eAAe,KAAK,QAAQ,GAAI,KAAK,EAAE,CAAC,CAAA,CAE5E,CA1NaC,EAAA,CAAXC,CAAA,EATmBV,EASR,UAAA,mBAAA,CAAA,EAgDAS,EAAA,CAAXC,CAAA,EAzDmBV,EAyDR,UAAA,cAAA,CAAA,EAYAS,EAAA,CAAXC,CAAA,EArEmBV,EAqER,UAAA,SAAA,CAAA,EAMAS,EAAA,CAAXC,CAAA,EA3EmBV,EA2ER,UAAA,YAAA,CAAA,EAWAS,EAAA,CAAXC,CAAA,EAtFmBV,EAsFR,UAAA,SAAA,CAAA,EAmEZS,EAAA,CADCC,CAAA,EAxJmBV,EAyJpB,UAAA,aAAA,CAAA,EAgEAS,EAAA,CADCE,CAAA,EAxNmBX,EAyNpB,UAAA,SAAA,CAAA"}