{"version":3,"file":"u1s4blTTEUOlM_4eMCaA.js","sources":["../../src/components/SwipeableLayout.tsx"],"sourcesContent":["import { useWindowSize } from \"@uidotdev/usehooks\";\nimport React from \"react\";\nimport { animated, config, useSpring } from \"react-spring\";\nimport { useDrag } from \"react-use-gesture\";\n\nimport styles from \"./styles.module.css\";\n\ninterface Props {\n\tleftChildren: React.ReactNode;\n\trightChildren: React.ReactNode;\n\tchildren: React.ReactNode;\n}\n\nfunction SwipeableLayout({ leftChildren, children, rightChildren }: Props) {\n\tconst size = useWindowSize();\n\tconst [{ x }, api] = useSpring(() => ({\n\t\tx: 0,\n\t}));\n\n\tconst open = (canceled: boolean) => {\n\t\t// when cancel is true, it means that the user passed the upwards threshold\n\t\t// so we change the spring config to create a nice wobbly effect\n\t\tapi.start({ x: (size.width! * 80) / 100, immediate: false, config: canceled ? config.wobbly : config.stiff });\n\t};\n\n\tconst close = (velocity = 0) => {\n\t\tapi.start({ x: 0, immediate: false, config: { ...config.stiff, velocity } });\n\t};\n\n\tconst bind = useDrag(\n\t\t({ last, velocity: v, direction: [dx], offset: [ox], cancel, canceled }) => {\n\t\t\tconst maxWidth = size.width! * 0.5;\n\t\t\tconsole.debug(\"=-=-=-=-=-=-=-=-=-=-\");\n\t\t\tconsole.debug(`X is: `, x.get());\n\t\t\tconsole.debug(`Max width is: `, maxWidth);\n\t\t\tconsole.debug(`Last`, last);\n\t\t\tconsole.debug(`Velocity is: `, v);\n\t\t\tconsole.debug(`Direction is: `, dx);\n\t\t\tconsole.debug(`Offset is: `, ox);\n\n\t\t\t// // on release, check if passed threshold to close, or reset to open pos\n\t\t\t// if (last) {\n\t\t\t// \t// if direction is < 0 (left), and offset is less than 50% of the screen width then close\n\n\t\t\t// \tox < maxWidth && dx === -1 ? close(v) : open(canceled);\n\t\t\t// } else api.start({ x: ox });\n\n\t\t\tapi.start({ x: ox });\n\t\t},\n\t\t{\n\t\t\tfrom: () => [x.get(), 0],\n\t\t\tfilterTaps: true,\n\t\t\tbounds: { left: 0, right: (size.width! * 80) / 100 },\n\t\t\trubberband: true,\n\t\t\t// initial: () => [x.get(), 0],\n\t\t\taxis: \"x\",\n\t\t},\n\t);\n\n\t// handle resize\n\tReact.useEffect(() => {\n\t\tconsole.log(\"width change\");\n\t\tif (x.get() > 0) {\n\t\t\topen(false);\n\t\t} else {\n\t\t\tclose();\n\t\t}\n\t}, [size.width]);\n\n\treturn (\n\t\t<animated.div {...bind()} className={styles.item}>\n\t\t\t{leftChildren}\n\t\t\t<animated.div className={styles.fg} style={{ x }}>\n\t\t\t\t{children}\n\t\t\t</animated.div>\n\t\t</animated.div>\n\t);\n}\n\nexport default SwipeableLayout;\n"],"names":["SwipeableLayout","leftChildren","children","rightChildren","size","useWindowSize","x","api","useSpring","open","canceled","config","close","velocity","bind","useDrag","last","v","dx","ox","cancel","maxWidth","React","jsxs","animated","styles","jsx"],"mappings":"qLAaA,SAASA,EAAgB,CAAE,aAAAC,EAAc,SAAAC,EAAU,cAAAC,GAAwB,CAC1E,MAAMC,EAAOC,EAAc,EACrB,CAAC,CAAE,EAAAC,CAAA,EAAKC,CAAG,EAAIC,EAAU,KAAO,CACrC,EAAG,CAAA,EACF,EAEIC,EAAQC,GAAsB,CAGnCH,EAAI,MAAM,CAAE,EAAIH,EAAK,MAAS,GAAM,IAAK,UAAW,GAAO,OAAmCO,EAAO,MAAO,CAC7G,EAEMC,EAAQ,CAACC,EAAW,IAAM,CAC/BN,EAAI,MAAM,CAAE,EAAG,EAAG,UAAW,GAAO,OAAQ,CAAE,GAAGI,EAAO,MAAO,SAAAE,GAAY,CAC5E,EAEMC,EAAOC,EACZ,CAAC,CAAE,KAAAC,EAAM,SAAUC,EAAG,UAAW,CAACC,CAAE,EAAG,OAAQ,CAACC,CAAE,EAAG,OAAAC,EAAQ,SAAAV,KAAe,CACrE,MAAAW,EAAWjB,EAAK,MAAS,GAC/B,QAAQ,MAAM,sBAAsB,EACpC,QAAQ,MAAM,SAAUE,EAAE,IAAA,CAAK,EACvB,QAAA,MAAM,iBAAkBe,CAAQ,EAChC,QAAA,MAAM,OAAQL,CAAI,EAClB,QAAA,MAAM,gBAAiBC,CAAC,EACxB,QAAA,MAAM,iBAAkBC,CAAE,EAC1B,QAAA,MAAM,cAAeC,CAAE,EAS/BZ,EAAI,MAAM,CAAE,EAAGY,CAAA,CAAI,CACpB,EACA,CACC,KAAM,IAAM,CAACb,EAAE,IAAA,EAAO,CAAC,EACvB,WAAY,GACZ,OAAQ,CAAE,KAAM,EAAG,MAAQF,EAAK,MAAS,GAAM,GAAI,EACnD,WAAY,GAEZ,KAAM,GAAA,CAER,EAGA,OAAAkB,EAAM,UAAU,IAAM,CACrB,QAAQ,IAAI,cAAc,EACtBhB,EAAE,IAAI,EAAI,EACbG,EAAU,EAEJG,EAAA,CACP,EACE,CAACR,EAAK,KAAK,CAAC,EAGdmB,EAAA,KAACC,EAAS,IAAT,CAAc,GAAGV,EAAK,EAAG,UAAWW,EAAO,KAC1C,SAAA,CAAAxB,EACDyB,EAAAA,IAACF,EAAS,IAAT,CAAa,UAAWC,EAAO,GAAI,MAAO,CAAE,EAAAnB,CAAE,EAC7C,SAAAJ,CACF,CAAA,CAAA,EACD,CAEF"}