{"version":3,"file":"BcCiPGGS8PR90wZpvSQK.js","sources":["../../src/utils/REST.ts"],"sourcesContent":["import AppStore from \"../stores/AppStore\";\nimport QueuedMessage from \"../stores/objects/QueuedMessage\";\nimport { Globals } from \"./Globals\";\nimport Logger from \"./Logger\";\nimport { RouteSettings } from \"./constants\";\n\nconst DEFAULT_HEADERS = {};\n\nexport default class REST {\n\tprivate readonly logger = new Logger(\"REST\");\n\tprivate app: AppStore;\n\tprivate headers: Record<string, string>;\n\n\tconstructor(app: AppStore) {\n\t\tthis.app = app;\n\t\tthis.headers = DEFAULT_HEADERS;\n\t}\n\n\tpublic setToken(token: string | null) {\n\t\tif (token) {\n\t\t\tthis.headers.Authorization = token;\n\t\t} else {\n\t\t\tdelete this.headers.Authorization;\n\t\t}\n\t}\n\n\tpublic static async getEndpointsFromDomain(url: URL): Promise<RouteSettings> {\n\t\ttry {\n\t\t\treturn await this.getInstanceDomains(url, url);\n\t\t} catch (e) {\n\t\t\t// continue\n\t\t}\n\n\t\t// get endpoints from .well-known\n\t\tconst wellKnown = await fetch(`${url.origin}/.well-known/spacebar`, {\n\t\t\tmethod: \"GET\",\n\t\t\theaders: DEFAULT_HEADERS,\n\t\t\tmode: \"cors\",\n\t\t})\n\t\t\t.then((x) => x.json())\n\t\t\t.then((x) => new URL(x.api));\n\n\t\t// well-known was found\n\t\treturn await this.getInstanceDomains(wellKnown, url);\n\t}\n\n\tstatic async getInstanceDomains(url: URL, knownas: URL): Promise<RouteSettings> {\n\t\tconst endpoints = await fetch(\n\t\t\t`${url.toString()}${url.pathname.includes(\"api\") ? \"\" : \"api\"}/policies/instance/domains`,\n\t\t\t{\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: DEFAULT_HEADERS,\n\t\t\t\tmode: \"cors\",\n\t\t\t},\n\t\t).then((x) => x.json());\n\t\treturn {\n\t\t\tapi: endpoints.apiEndpoint,\n\t\t\tgateway: endpoints.gateway,\n\t\t\tcdn: endpoints.cdn,\n\t\t\twellknown: knownas.toString(),\n\t\t};\n\t}\n\n\tpublic static makeAPIUrl(\n\t\tpath: string,\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tqueryParams: Record<string, any> = {},\n\t) {\n\t\tconst url = new URL(`${Globals.routeSettings.api}${path}`);\n\t\tObject.entries(queryParams).forEach(([key, value]) => {\n\t\t\turl.searchParams.append(key, value);\n\t\t});\n\t\treturn url.toString();\n\t}\n\n\tpublic static makeCDNUrl(\n\t\tpath: string,\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tqueryParams: Record<string, any> = {},\n\t) {\n\t\tconst url = new URL(`${Globals.routeSettings.cdn}${path}`);\n\t\tObject.entries(queryParams).forEach(([key, value]) => {\n\t\t\turl.searchParams.append(key, value);\n\t\t});\n\t\treturn url.toString();\n\t}\n\n\tpublic async get<T>(\n\t\tpath: string,\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tqueryParams: Record<string, any> = {},\n\t): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst url = REST.makeAPIUrl(path, queryParams);\n\t\t\t//   this.logger.debug(`GET ${url}`);\n\t\t\treturn fetch(url, {\n\t\t\t\tmethod: \"GET\",\n\t\t\t\theaders: this.headers,\n\t\t\t\tmode: \"cors\",\n\t\t\t})\n\t\t\t\t.then(async (res) => {\n\t\t\t\t\tif (res.headers.get(\"content-length\") !== \"0\") {\n\t\t\t\t\t\tif (res.headers.get(\"content-type\")?.includes(\"application/json\")) {\n\t\t\t\t\t\t\tif (!res.ok) return reject(await res.json());\n\t\t\t\t\t\t\treturn res.json();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!res.ok) return reject(res.json());\n\t\t\t\t\t\treturn res.text();\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(resolve)\n\t\t\t\t.catch(reject);\n\t\t});\n\t}\n\n\tpublic async post<T, U>(\n\t\tpath: string,\n\t\tbody?: T,\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tqueryParams: Record<string, any> = {},\n\t\theaders: Record<string, string> = {},\n\t): Promise<U> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst url = REST.makeAPIUrl(path, queryParams);\n\t\t\tthis.logger.debug(`POST ${url}; payload:`, body);\n\t\t\treturn fetch(url, {\n\t\t\t\tmethod: \"POST\",\n\t\t\t\theaders: {\n\t\t\t\t\t...headers,\n\t\t\t\t\t...this.headers,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t\tbody: body ? JSON.stringify(body) : undefined,\n\t\t\t\tmode: \"cors\",\n\t\t\t})\n\t\t\t\t.then(async (res) => {\n\t\t\t\t\t// handle json if content type is json\n\t\t\t\t\tif (res.headers.get(\"content-type\")?.includes(\"application/json\")) {\n\t\t\t\t\t\tconst data = await res.json();\n\t\t\t\t\t\tif (res.ok) return resolve(data);\n\t\t\t\t\t\telse return reject(data);\n\t\t\t\t\t}\n\n\t\t\t\t\t// if theres content, handle text\n\t\t\t\t\tif (res.headers.get(\"content-length\") !== \"0\") {\n\t\t\t\t\t\tconst data = await res.text();\n\t\t\t\t\t\tif (res.ok) return resolve(data as U);\n\t\t\t\t\t\telse return reject(data as U);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (res.ok) return resolve(res.status as U);\n\t\t\t\t\telse return reject(res.statusText);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\t}\n\n\tpublic async put<T, U>(\n\t\tpath: string,\n\t\tbody?: T,\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tqueryParams: Record<string, any> = {},\n\t\theaders: Record<string, string> = {},\n\t): Promise<U> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst url = REST.makeAPIUrl(path, queryParams);\n\t\t\tthis.logger.debug(`PUT ${url}; payload:`, body);\n\t\t\treturn fetch(url, {\n\t\t\t\tmethod: \"PUT\",\n\t\t\t\theaders: {\n\t\t\t\t\t...headers,\n\t\t\t\t\t...this.headers,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t\tbody: body ? JSON.stringify(body) : undefined,\n\t\t\t\tmode: \"cors\",\n\t\t\t})\n\t\t\t\t.then(async (res) => {\n\t\t\t\t\t// handle json if content type is json\n\t\t\t\t\tif (res.headers.get(\"content-type\")?.includes(\"application/json\")) {\n\t\t\t\t\t\tconst data = await res.json();\n\t\t\t\t\t\tif (res.ok) return resolve(data);\n\t\t\t\t\t\telse return reject(data);\n\t\t\t\t\t}\n\n\t\t\t\t\t// if theres content, handle text\n\t\t\t\t\tif (res.headers.get(\"content-length\") !== \"0\") {\n\t\t\t\t\t\tconst data = await res.text();\n\t\t\t\t\t\tif (res.ok) return resolve(data as U);\n\t\t\t\t\t\telse return reject(data as U);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (res.ok) return resolve(res.status as U);\n\t\t\t\t\telse return reject(res.statusText);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\t}\n\n\tpublic async patch<T, U>(\n\t\tpath: string,\n\t\tbody?: T,\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tqueryParams: Record<string, any> = {},\n\t\theaders: Record<string, string> = {},\n\t): Promise<U> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst url = REST.makeAPIUrl(path, queryParams);\n\t\t\tthis.logger.debug(`PATCH ${url}; payload:`, body);\n\t\t\treturn fetch(url, {\n\t\t\t\tmethod: \"PATCH\",\n\t\t\t\theaders: {\n\t\t\t\t\t...headers,\n\t\t\t\t\t...this.headers,\n\t\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\t},\n\t\t\t\tbody: body ? JSON.stringify(body) : undefined,\n\t\t\t\tmode: \"cors\",\n\t\t\t})\n\t\t\t\t.then(async (res) => {\n\t\t\t\t\t// handle json if content type is json\n\t\t\t\t\tif (res.headers.get(\"content-type\")?.includes(\"application/json\")) {\n\t\t\t\t\t\tconst data = await res.json();\n\t\t\t\t\t\tif (res.ok) return resolve(data);\n\t\t\t\t\t\telse return reject(data);\n\t\t\t\t\t}\n\n\t\t\t\t\t// if theres content, handle text\n\t\t\t\t\tif (res.headers.get(\"content-length\") !== \"0\") {\n\t\t\t\t\t\tconst data = await res.text();\n\t\t\t\t\t\tif (res.ok) return resolve(data as U);\n\t\t\t\t\t\telse return reject(data as U);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (res.ok) return resolve(res.status as U);\n\t\t\t\t\telse return reject(res.statusText);\n\t\t\t\t})\n\t\t\t\t.catch(reject);\n\t\t});\n\t}\n\n\tpublic async postFormData<U>(\n\t\tpath: string,\n\t\tbody: FormData,\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tqueryParams: Record<string, any> = {},\n\t\theaders: Record<string, string> = {},\n\t\tmsg?: QueuedMessage,\n\t): Promise<U> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst url = REST.makeAPIUrl(path, queryParams);\n\t\t\tthis.logger.debug(`POST ${url}; payload:`, body);\n\t\t\tconst xhr = new XMLHttpRequest();\n\t\t\tif (msg) {\n\t\t\t\t// add abort callback\n\t\t\t\tmsg.setAbortCallback(() => {\n\t\t\t\t\tthis.logger.debug(\"[PostFormData]: Message called abort\");\n\t\t\t\t\txhr.abort();\n\t\t\t\t\treject(\"aborted\");\n\t\t\t\t});\n\t\t\t\t// add progress listener\n\t\t\t\txhr.upload.addEventListener(\"progress\", (e: ProgressEvent) => msg.updateProgress(e));\n\t\t\t}\n\t\t\txhr.addEventListener(\"loadend\", () => {\n\t\t\t\t// if success, resolve text or json\n\t\t\t\tif (xhr.status >= 200 && xhr.status < 300) {\n\t\t\t\t\tif (xhr.responseType === \"json\") return resolve(xhr.response);\n\n\t\t\t\t\treturn resolve(JSON.parse(xhr.response));\n\t\t\t\t}\n\n\t\t\t\t// if theres content, reject with text\n\t\t\t\tif (xhr.getResponseHeader(\"content-length\") !== \"0\") return reject(xhr.responseText);\n\n\t\t\t\t// reject with status code if theres no content\n\t\t\t\treturn reject(xhr.statusText);\n\t\t\t});\n\t\t\txhr.open(\"POST\", url);\n\t\t\t// set headers\n\t\t\tObject.entries({ ...headers, ...this.headers }).forEach(([key, value]) => {\n\t\t\t\txhr.setRequestHeader(key, value);\n\t\t\t});\n\t\t\txhr.send(body);\n\t\t});\n\t}\n\n\tpublic async delete(\n\t\tpath: string,\n\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\tqueryParams: Record<string, any> = {},\n\t\theaders: Record<string, string> = {},\n\t): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst url = REST.makeAPIUrl(path, queryParams);\n\t\t\tthis.logger.debug(`DELETE ${url}`);\n\t\t\treturn (\n\t\t\t\tfetch(url, {\n\t\t\t\t\tmethod: \"DELETE\",\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t...headers,\n\t\t\t\t\t\t...this.headers,\n\t\t\t\t\t},\n\t\t\t\t\tmode: \"cors\",\n\t\t\t\t})\n\t\t\t\t\t// .then((res) => res.json())\n\t\t\t\t\t.then(() => resolve())\n\t\t\t\t\t.catch(reject)\n\t\t\t);\n\t\t});\n\t}\n}\n"],"names":["DEFAULT_HEADERS","REST","app","__publicField","Logger","token","url","wellKnown","x","knownas","endpoints","path","queryParams","Globals","key","value","resolve","reject","res","_a","body","headers","data","msg","xhr","e"],"mappings":"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"}