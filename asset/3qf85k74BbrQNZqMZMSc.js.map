{"version":3,"file":"3qf85k74BbrQNZqMZMSc.js","sources":["../../src/components/GuildItem.tsx"],"sourcesContent":["import { CDNRoutes, ChannelType, ImageFormat } from \"@spacebarchat/spacebar-api-types/v9\";\nimport { observer } from \"mobx-react-lite\";\nimport React, { useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { ContextMenuContext } from \"../contexts/ContextMenuContext\";\nimport { useAppStore } from \"../hooks/useAppStore\";\nimport useLogger from \"../hooks/useLogger\";\nimport Guild from \"../stores/objects/Guild\";\nimport { Permissions } from \"../utils/Permissions\";\nimport REST from \"../utils/REST\";\nimport Container from \"./Container\";\nimport SidebarPill, { PillType } from \"./SidebarPill\";\nimport Floating from \"./floating/Floating\";\nimport FloatingTrigger from \"./floating/FloatingTrigger\";\n\nexport const GuildSidebarListItem = styled.div`\n\tposition: relative;\n\tdisplay: flex;\n\tjustify-content: center;\n\tcursor: pointer;\n`;\n\nconst Wrapper = styled(Container)<{ active?: boolean; hasImage?: boolean }>`\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\twidth: 48px;\n\theight: 48px;\n\tborder-radius: ${(props) => (props.active ? \"30%\" : \"50%\")};\n\tbackground-color: ${(props) =>\n\t\tprops.hasImage ? \"transparent\" : props.active ? \"var(--primary)\" : \"var(--background-secondary)\"};\n\ttransition:\n\t\tborder-radius 0.2s ease,\n\t\tbackground-color 0.2s ease;\n\n\t&:hover {\n\t\tborder-radius: 30%;\n\t\tbackground-color: ${(props) => (props.hasImage ? \"transparent\" : \"var(--primary)\")};\n\t}\n`;\n\ninterface Props {\n\tguild: Guild;\n\tactive?: boolean;\n}\n\n/**\n * List item for use in the guild sidebar\n */\nfunction GuildItem({ guild, active }: Props) {\n\tconst logger = useLogger(\"GuildItem\");\n\tconst app = useAppStore();\n\tconst navigate = useNavigate();\n\tconst contextMenu = useContext(ContextMenuContext);\n\n\tconst [pillType, setPillType] = React.useState<PillType>(\"none\");\n\tconst [isHovered, setHovered] = React.useState(false);\n\n\tReact.useEffect(() => {\n\t\tif (app.activeChannelId && app.activeGuildId === guild.id) return setPillType(\"active\");\n\t\telse if (isHovered) return setPillType(\"hover\");\n\t\t// TODO: unread\n\t\telse return setPillType(\"none\");\n\t}, [app.activeGuildId, isHovered]);\n\n\tconst doNavigate = () => {\n\t\tconst channel = guild.channels.find((x) => {\n\t\t\tconst permission = Permissions.getPermission(app.account!.id, guild, x);\n\t\t\treturn x.type !== ChannelType.GuildCategory;\n\t\t});\n\t\tnavigate(`/channels/${guild.id}${channel ? `/${channel.id}` : \"\"}`);\n\t};\n\n\treturn (\n\t\t<GuildSidebarListItem\n\t\t\tref={contextMenu.setReferenceElement}\n\t\t\tonContextMenu={(e) => contextMenu.onContextMenu(e, { type: \"guild\", guild })}\n\t\t>\n\t\t\t<SidebarPill type={pillType} />\n\t\t\t<Floating\n\t\t\t\tplacement=\"right\"\n\t\t\t\ttype=\"tooltip\"\n\t\t\t\toffset={20}\n\t\t\t\tprops={{\n\t\t\t\t\tcontent: <span>{guild.name}</span>,\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<FloatingTrigger>\n\t\t\t\t\t<Wrapper\n\t\t\t\t\t\tonClick={doNavigate}\n\t\t\t\t\t\tactive={active}\n\t\t\t\t\t\thasImage={!!guild?.icon}\n\t\t\t\t\t\tonMouseEnter={() => setHovered(true)}\n\t\t\t\t\t\tonMouseLeave={() => setHovered(false)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{guild.icon ? (\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={REST.makeCDNUrl(CDNRoutes.guildIcon(guild.id, guild?.icon, ImageFormat.PNG))}\n\t\t\t\t\t\t\t\twidth={48}\n\t\t\t\t\t\t\t\theight={48}\n\t\t\t\t\t\t\t\tloading=\"lazy\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\tfontSize: \"18px\",\n\t\t\t\t\t\t\t\t\tfontWeight: \"bold\",\n\t\t\t\t\t\t\t\t\tcursor: \"pointer\",\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{guild?.acronym}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Wrapper>\n\t\t\t\t</FloatingTrigger>\n\t\t\t</Floating>\n\t\t</GuildSidebarListItem>\n\t);\n}\n\nexport default observer(GuildItem);\n"],"names":["GuildSidebarListItem","styled","Wrapper","Container","props","GuildItem","guild","active","app","useAppStore","navigate","useNavigate","contextMenu","useContext","ContextMenuContext","pillType","setPillType","React","isHovered","setHovered","doNavigate","channel","x","Permissions","ChannelType","jsxs","e","jsx","SidebarPill","Floating","FloatingTrigger","REST","CDNRoutes","ImageFormat","GuildItem$1","observer"],"mappings":"idAgBO,MAAMA,EAAuBC,EAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAOrCC,EAAUD,EAAOE,CAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMbC,GAAWA,EAAM,OAAS,MAAQ,KAAM;AAAA,qBACrCA,GACpBA,EAAM,SAAW,cAAgBA,EAAM,OAAS,iBAAmB,6BAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAO3EA,GAAWA,EAAM,SAAW,cAAgB,gBAAiB;AAAA;AAAA,EAYpF,SAASC,EAAU,CAAE,MAAAC,EAAO,OAAAC,GAAiB,CAE5C,MAAMC,EAAMC,EAAY,EAClBC,EAAWC,EAAY,EACvBC,EAAcC,aAAWC,CAAkB,EAE3C,CAACC,EAAUC,CAAW,EAAIC,EAAM,SAAmB,MAAM,EACzD,CAACC,EAAWC,CAAU,EAAIF,EAAM,SAAS,EAAK,EAEpDA,EAAM,UAAU,IACXT,EAAI,iBAAmBA,EAAI,gBAAkBF,EAAM,GAAWU,EAAY,QAAQ,EAC3DA,EAAlBE,EAA8B,QAEf,MAFsB,EAG5C,CAACV,EAAI,cAAeU,CAAS,CAAC,EAEjC,MAAME,EAAa,IAAM,CACxB,MAAMC,EAAUf,EAAM,SAAS,KAAMgB,IACjBC,EAAY,cAAcf,EAAI,QAAS,GAAIF,EAAOgB,CAAC,EAC/DA,EAAE,OAASE,EAAY,cAC9B,EACQd,EAAA,aAAaJ,EAAM,EAAE,GAAGe,EAAU,IAAIA,EAAQ,EAAE,GAAK,EAAE,EAAE,CACnE,EAGC,OAAAI,EAAA,KAACzB,EAAA,CACA,IAAKY,EAAY,oBACjB,cAAgBc,GAAMd,EAAY,cAAcc,EAAG,CAAE,KAAM,QAAS,MAAApB,EAAO,EAE3E,SAAA,CAACqB,EAAAA,IAAAC,EAAA,CAAY,KAAMb,CAAU,CAAA,EAC7BY,EAAA,IAACE,EAAA,CACA,UAAU,QACV,KAAK,UACL,OAAQ,GACR,MAAO,CACN,QAASF,EAAA,IAAC,OAAM,CAAA,SAAArB,EAAM,IAAK,CAAA,CAC5B,EAEA,eAACwB,EACA,CAAA,SAAAH,EAAA,IAACzB,EAAA,CACA,QAASkB,EACT,OAAAb,EACA,SAAU,CAAC,EAACD,GAAA,MAAAA,EAAO,MACnB,aAAc,IAAMa,EAAW,EAAI,EACnC,aAAc,IAAMA,EAAW,EAAK,EAEnC,WAAM,KACNQ,EAAA,IAAC,MAAA,CACA,IAAKI,EAAK,WAAWC,EAAU,UAAU1B,EAAM,GAAIA,GAAA,YAAAA,EAAO,KAAM2B,EAAY,GAAG,CAAC,EAChF,MAAO,GACP,OAAQ,GACR,QAAQ,MAAA,CAAA,EAGTN,EAAA,IAAC,OAAA,CACA,MAAO,CACN,SAAU,OACV,WAAY,OACZ,OAAQ,SACT,EAEC,SAAOrB,GAAA,YAAAA,EAAA,OAAA,CAAA,CACT,CAAA,CAGH,CAAA,CAAA,CAAA,CACD,CAAA,CACD,CAEF,CAEA,MAAe4B,EAAAC,EAAS9B,CAAS"}